/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package app.epor.struts.action;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.UnsupportedEncodingException;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import net.sf.ezmorph.object.DateMorpher;
import net.sf.json.JSONArray;
import net.sf.json.JSONObject;
import net.sf.json.JsonConfig;
import net.sf.json.util.JSONUtils;

import org.apache.log4j.Logger;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.upload.FormFile;
import org.directwebremoting.servlet.DwrServlet;
import org.jbpm.api.task.Task;

import com.sdaac.pr.approve.PRProcessEngine;
import com.sdaac.pr.tools.Tools;
import com.security.biz.impl.MailManager;

import sdaac.wym.app.Service.PCL.MainData.BaseForm;
import sdaac.wym.app.Service.PCL.MainData.MDForm;

import common.dao.CommonDAO;
import common.entity.Tfunction;
import common.entity.Trole;
import common.util.DownLoad;
import common.util.FileUpload;
import common.util.JsonUtil;
import common.util.MyUtil;
import common.util.PropertiesRead;
import common.util.Reports.PCLPostingDate;
import common.util.download.UploadFile;

import app.biz.impl.epor.AuthorizedImpl;
import app.biz.impl.epor.PRApproveManagertoSY;
import app.biz.impl.epor.PrFormBizImpl;
import app.common.DateJsonValueProcessor;
import app.common.EprExcel;
import app.common.EprExcel4Finance;
import app.common.web.ToJson;
import app.entity.Tdepartment;
import app.entity.Tempolyee;
import app.entity.Tuser;
import app.entity.epor.Paydetails;
import app.entity.epor.PrApprovedForm;
import app.entity.epor.PrBuyContext;
import app.entity.epor.PrBuyer;
import app.entity.epor.PrCostCenter;
import app.entity.epor.PrForm;
import app.entity.epor.PrPrForm;
import app.entity.epor.PrProject;
import app.entity.epor.StateManager;
import app.entity.epor.Subject;
import app.entity.epor.forms.SingleForm;
import app.epor.struts.form.EporForm;

/**
 * PR采购action类 MyEclipse Struts Creation date: 04-22-2009 XDoclet definition:
 * 
 * @struts.action path="/epor" name="eporForm" input="/form/epor.jsp"
 *                parameter="actionType" scope="request" validate="true"
 */
public class EporAction extends EporBaseAction {
	/*
	 * Generated Methods
	 */
	private static Logger logger = Logger.getLogger(EporAction.class);
	private Tuser user;
	//private final static String uploadUrl = "C:\\Program Files\\Apache Software Foundation\\Tomcat 6.0\\webapps\\uploadFolder";
	private final static String uploadUrl = "D:\\Program Files\\Apache Software Foundation\\Tomcat 6.0\\webapps\\uploadFolder";
	
	public static String dealString4JSON(String ors) {
	       ors = ors == null ? "" : ors;
	       StringBuffer buffer = new StringBuffer(ors);
	       ///在替换的时候不要使用 String.replaceAll("\\","\\\\"); 这样不会达到替换的效果 因为这些符号有特殊的意义,在正则     ///表达式里要用到
	       int i = 0;
	       while (i < buffer.length()) {
	        if (buffer.charAt(i) == '\'' || buffer.charAt(i) == '\\') {
	         buffer.insert(i, '\\');
	         i += 2;
	        } else {
	         i++;
	        }
	      }
	       return buffer.toString().replaceAll("\r", "").replaceAll("\n", "");
	}
	/**
	 * 提交pr单
	 */
	public ActionForward doInsert(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		EporForm eporForm = (EporForm) form;// TODO Auto-generated method stub
		PrPrForm prForm = eporForm.getPrForm();
		// String pm = request.getParameter("pm");
		// String ccowner = request.getParameter("ccowner");
		user = (Tuser) request.getSession().getAttribute("logineduser");
		prForm.setTempolyeeByApplicantId(user.getEmp());// 申请人
		int source = 1;
		if(user.getEmp().getArea() != null){
			source = PrPrForm.areaToSource(user.getEmp().getArea());
		}		 
		prForm.setSource(source);

		if (prForm.getPrCostCenter().getId() == null
				|| prForm.getPrCostCenter().getId() == 0) {
			prForm.setPrCostCenter(new PrCostCenter(170));
		}

		Float totalCost = 0f;// 合计
		prForm.initVersion();
		prForm.setState(0);// 状态
		prForm.setApplicantDate(new Date());// 设置提交日期
		prForm.setId(prForm.getSysId());

		FormFile file = eporForm.getFormFile();// 取得上传的文件
		String filePath = uploadUrl;// request.getRealPath("/uploadFolder");//上传到指定的upload包中

		UploadFile uf = new UploadFile();
		prForm.setFileName(uf.uFile(file, filePath, prForm.getId()));
		prForm.setBigcountFile(uf.uFile(eporForm.getBigcountFile(), filePath,
				prForm.getId()));
		prForm.setUrgentFile(uf.uFile(eporForm.getUrgencyFile(), filePath,
				prForm.getId()));
		prForm.setSinglesourceFile(uf.uFile(eporForm.getSinglesourceFile(),
				filePath, prForm.getId()));
		// FormFile[] files = new
		// FormFile[]{eporForm.getFormFile(),eporForm.getBigcountFile(),eporForm.getSinglesourceFile(),eporForm.getUrgencyFile()};
		// uf.uFiles(files, filePath, prForm);
		// 购买物品
		String S = request.getParameter("data");
		String newS = S.replaceAll("%", "%25");
		// String newS2 = newS.replaceAll("'", "/'");
		try {
			S = java.net.URLDecoder.decode(newS, "UTF-8");
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		String[] dateFormats = new String[] { "yyyy-MM-dd" };
		JSONUtils.getMorpherRegistry().registerMorpher(
				new DateMorpher(dateFormats));
		//String jsonS = dealString4JSON(S);
		//S = "[{description:'a\\'s',band:'66', remark:'a#', quantity:'66', unit:'66', expectDeliveryDate:'2015-05-10', unitPrice:'', amount:'', currency:'', glAccount:'', orderNo:'', type:'66', unitPriceE:'66'}]";
		JSONArray buycontextJson = JSONArray.fromObject(S);
		List<PrBuyContext> buycontextList = new ArrayList<PrBuyContext>();
		String buyerName = "";
		for (int i = 0; i < buycontextJson.size(); i++) {
			JSONObject target = buycontextJson.getJSONObject(i);
			PrBuyContext elem = (PrBuyContext) JSONObject.toBean(target,
					PrBuyContext.class);
			elem.setPrPrForm(prForm);
			if (elem.getUnitPriceE() != null) {
				totalCost += elem.getUnitPriceE() * elem.getQuantity();
			}
			buycontextList.add(elem);
			// if ("".equals(buyerName)) {
			// buyerName = elem.getBuyerId();
			// }
		}
		// prForm.setTotalE(totalCost);
		prForm.setTotal(totalCost);
		// prForm.setTempolyeeByBuyerId(buyerName);
		prForm.setPrBuyContexts(buycontextList);
		if (request.getParameter("isInsert") != null
				&& request.getParameter("isInsert").equals("y")) {

			this.getPrFormBiz().doApply(prForm);
		} else {
			prForm.setInfo(4);
			this.getPrFormBiz().savePrform(prForm);
		}

		return null;
	}

	public ActionForward dorefillin(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		EporForm eporForm = (EporForm) form;// TODO Auto-generated method stub
		PrPrForm prForm = eporForm.getPrForm();
		user = (Tuser) request.getSession().getAttribute("logineduser");
		prForm.setTempolyeeByApplicantId(user.getEmp());// 申请人
		int source = PrPrForm.areaToSource(user.getEmp().getArea());
		prForm.setSource(source);

		if (prForm.getPrCostCenter().getId() == null
				|| prForm.getPrCostCenter().getId() == 0) {
			prForm.setPrCostCenter(new PrCostCenter(170));
		}

		Float totalCost = 0f;// 合计
		//prForm.initVersion();
		//prForm.setState(0);// 状态
		//prForm.setApplicantDate(new Date());// 设置提交日期
		//prForm.setId(prForm.getSysId());

		FormFile file = eporForm.getFormFile();// 取得上传的文件
		String filePath = uploadUrl;// request.getRealPath("/uploadFolder");//上传到指定的upload包中
		UploadFile uf = new UploadFile();
		prForm.setFileName(uf.uFile(file, filePath, prForm.getId()));
		prForm.setBigcountFile(uf.uFile(eporForm.getBigcountFile(), filePath,
				prForm.getId()));
		prForm.setUrgentFile(uf.uFile(eporForm.getUrgencyFile(), filePath,
				prForm.getId()));
		prForm.setSinglesourceFile(uf.uFile(eporForm.getSinglesourceFile(),
				filePath, prForm.getId()));
		// FormFile[] files = new
		// FormFile[]{eporForm.getFormFile(),eporForm.getBigcountFile(),eporForm.getSinglesourceFile(),eporForm.getUrgencyFile()};
		// uf.uFiles(files, filePath, prForm);
		// 购买物品
		String S = request.getParameter("data");
		String newS = S.replaceAll("%", "%25");
		// String newS2 = newS.replaceAll("'", "/'");
		try {
			S = java.net.URLDecoder.decode(newS, "UTF-8");
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		String[] dateFormats = new String[] { "yyyy-MM-dd" };
		JSONUtils.getMorpherRegistry().registerMorpher(
				new DateMorpher(dateFormats));

		JSONArray buycontextJson = JSONArray.fromObject(S);
		List<PrBuyContext> buycontextList = new ArrayList<PrBuyContext>();
		String buyerName = "";
		for (int i = 0; i < buycontextJson.size(); i++) {
			JSONObject target = buycontextJson.getJSONObject(i);
			PrBuyContext elem = (PrBuyContext) JSONObject.toBean(target,
					PrBuyContext.class);
			elem.setPrPrForm(prForm);
			if (elem.getUnitPriceE() != null) {
				totalCost += elem.getUnitPriceE() * elem.getQuantity();
			}
			buycontextList.add(elem);
			prForm.setTotal(totalCost);
			prForm.setPrBuyContexts(buycontextList);
			

			// return null;
		}
		String context = request.getParameter("context");
		String newCon ="";
		if(context!=null && !"".equals(context)){
			try {
				newCon = java.net.URLDecoder.decode(context, "UTF-8");
			} catch (UnsupportedEncodingException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		prForm.Mailer = newCon;
		this.getPrFormBiz().doUpdatePr(prForm,buycontextList);
		////this.getPrFormBiz().doUpdatePRFromByNewPR(eporForm.getApprovedPR());
		return null;
	}

	/**
	 * 更改PR
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws ParseException
	 */
	public ActionForward doUpdate(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws ParseException {
		EporForm eporForm = (EporForm) form;// TODO Auto-generated method stub
		PrPrForm prForm = eporForm.getApprovedPR().getPrPrForm();
		String prformid = request.getParameter("prformid");
		prForm.setId(prformid);
		user = (Tuser) request.getSession().getAttribute("logineduser");

		FormFile file = eporForm.getFormFile();// 取得上传的文件
		String filePath = uploadUrl;// request.getRealPath("/uploadFolder");//上传到指定的upload包中
		UploadFile uf = new UploadFile();
		prForm.setFileName(uf.uFile(file, filePath, prForm.getId()));
		prForm.setBigcountFile(uf.uFile(eporForm.getBigcountFile(), filePath,
				prForm.getId()));
		prForm.setUrgentFile(uf.uFile(eporForm.getUrgencyFile(), filePath,
				prForm.getId()));
		prForm.setSinglesourceFile(uf.uFile(eporForm.getSinglesourceFile(),
				filePath, prForm.getId()));
		
		String S = request.getParameter("data");
		String newS = S.replaceAll("%", "%25");
		// String newS2 = newS.replaceAll("'", "/'");
		try {
			S = java.net.URLDecoder.decode(newS, "UTF-8");
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		String[] dateFormats = new String[] { "yyyy-MM-dd" };
		JSONUtils.getMorpherRegistry().registerMorpher(
				new DateMorpher(dateFormats));

		JSONArray buycontextJson = JSONArray.fromObject(S);
		List<PrBuyContext> buycontextList = new ArrayList<PrBuyContext>();
		String buyerName = "";
		for (int i = 0; i < buycontextJson.size(); i++) {
			JSONObject target = buycontextJson.getJSONObject(i);
			PrBuyContext elem = (PrBuyContext) JSONObject.toBean(target,
					PrBuyContext.class);
			elem.setPrPrForm(prForm);
			if (elem.getUnitPriceE() != null) {
				//totalCost += elem.getUnitPriceE() * elem.getQuantity();
			}
			buycontextList.add(elem);
			//prForm.setTotal(totalCost);
			prForm.setPrBuyContexts(buycontextList);
		}
		
		String context = request.getParameter("context");
		//String context = request.getParameter("context");
		try {
			context=new String(context.getBytes("ISO-8859-1"),"UTF-8");
		} catch (UnsupportedEncodingException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		context = context.replaceAll("%", "%25");
		String newCon ="";
		if(context!=null && !"".equals(context)){
			try {
				newCon = java.net.URLDecoder.decode(context, "UTF-8");
				
			} catch (UnsupportedEncodingException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		eporForm.getApprovedPR().setContext(newCon);
		eporForm.getApprovedPR().setTempolyee(user.getEmp());
		this.getPrFormBiz().doUpdatePRFromByNewPR(eporForm.getApprovedPR(),buycontextList);
		return null;

	}

	public ActionForward doUpdateAdmin(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws ParseException {
		EporForm eporForm = (EporForm) form;// TODO Auto-generated method stub
		PrPrForm prForm = eporForm.getPrForm();
		prForm.versionUp();
		String isAssignation = request.getParameter("isAssignation");// 指定供应商
		if (isAssignation != null && isAssignation.equals("1")
				&& prForm.getRecommendedSupplier().indexOf("指定") < 0) {
			prForm.setRecommendedSupplier(prForm.getRecommendedSupplier()
					+ "(指定)");
			prForm.setAcutalSupplier(prForm.getRecommendedSupplier());
		}
		String[] types = request.getParameterValues("a");// PR单类型
		String temp = "";
		if (types != null) {
			for (String a : types) {
				temp += a + ",";
			}
		}
		prForm.setType(temp);
		FormFile file = eporForm.getFormFile();// 取得上传的文件
		if (file.getFileSize() != 0) {
			String filePath = uploadUrl;// request.getRealPath("/uploadFolder");//上传到指定的upload包中
			UploadFile uf = new UploadFile();
			prForm.setFileName(uf.uFile(file, filePath, prForm.getId()));
		}

		user = (Tuser) request.getSession().getAttribute("logineduser");

		int sourceNum = 0;
		String source = request.getParameter("source");
		if (source != null && source.equals("dt02"))
			sourceNum = 1;
		else if (source != null && source.equals("dt03"))
			sourceNum = 2;
		else if (source != null && source.equals("dt04"))
			sourceNum = 3;
		else if (source != null && source.equals("dt05"))
			sourceNum = 4;
		if (sourceNum > 0) {
			prForm.setSource(sourceNum);
		}
		this.getPrFormBiz().doUpdatePRFrom(prForm, user.getEmp());
		if (prForm.getInfo() == 5) {
			PrApprovedForm approveForm = eporForm.getApprovedPR();
			prForm.Mailer = request.getParameter("mailer");
			String relateUids = "";
			if (prForm.getType().contains(PrPrForm.ITSingle)) {
				relateUids = "5003;";
				if (prForm.getSource() == 2) {
					relateUids = "5003;";
				}
			}
			approveForm.setRelateUids(relateUids);
			approveForm.setPrPrForm(prForm);
			this.getPrFormBiz().doApprovePR(approveForm);
		}
		return mapping.findForward("success");

	}

	/**
	 * 采购员上传附件 2013-11-26
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws IOException
	 */
	public ActionForward doUpoladBuyerFile(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws IOException {
		String filename = request.getParameter("userfile");
		EporForm eporForm = (EporForm) form;
		String id = request.getParameter("id");
		FormFile file = eporForm.getFormFile();// 取得上传的文件
		if (file.getFileSize() != 0) {
			String filePath = uploadUrl;
			UploadFile uf = new UploadFile();
			String ff = uf.uFile(file, filePath, id, "buyerFile-");
			if (ff != null && !"".equals(ff)) {
				response.getWriter().append("{success:true}");
			} else {
				response.getWriter().append("{success:false}");
			}
		} else {
			response.getWriter().append("{success:false}");
		}
		return null;
	}

	/**
	 * buyer填写信息
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward doBuyerConfirm(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		EporForm eporForm = (EporForm) form;// TODO Auto-generated method stub
		user = (Tuser) request.getSession().getAttribute("logineduser");
		PrPrForm prForm = eporForm.getPrForm();
		PrApprovedForm appForm = eporForm.getApprovedPR();
		prForm.setState(StateManager.BuyConfig);
		String isSubmit = request.getParameter("isSubmit");
		String[] prices = request.getParameterValues("price");
		Integer[] ids = MyUtil.toTransFormInteger(request
				.getParameterValues("prBuyContextId"));
		String[] currencys = request.getParameterValues("currency");
		Float[] quantities = MyUtil.toTransFormFloat(request
				.getParameterValues("quantity"));
		float totalCost = 0f;

		FormFile file = eporForm.getFormFile();// 取得上传的文件
		if (file != null && file.getFileSize() != 0) {
			String filePath = uploadUrl;// request.getRealPath("/uploadFolder");//上传到指定的upload包中
			UploadFile uf = new UploadFile();
			prForm.setBuyerfileName("buyerFile-"
					+ uf.uFile(file, filePath, prForm.getId(), "buyerFile-"));
		}

		if (ids != null && ids.length > 0) {
			List set = new ArrayList();
			for (int i = 0; i < ids.length; i++) {
				PrBuyContext buyContext = new PrBuyContext();

				buyContext.setCurrency(currencys[i]);
				buyContext.setId(ids[i]);
				if (prices[i] != null && !prices[i].equals("")) {
					buyContext.setUnitPrice(Float.parseFloat(prices[i].replace(
							",", "")));
					totalCost += quantities[i]
							* Float.parseFloat(prices[i].replace(",", ""));
				}
				set.add(buyContext);

			}
			prForm.setPrBuyContexts(set);
		}
		prForm.setTotal(totalCost);
		this.getPrFormBiz().doBuyerConfirm(prForm, user.getEmp(), appForm,
				isSubmit);
		return mapping.findForward("success");
	}

	/**
	 * 查看pr单详细,打印
	 * 
	 * @param Integer
	 *            prID
	 */
	public ActionForward doSelectPrFormPrint(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		user = (Tuser) request.getSession().getAttribute("logineduser");
		// String url="showPrForm";
		String prID = request.getParameter("prFormID");
		List<PrPrForm> prFormList = this.getPrFormBiz().doSelect(
				new PrPrForm(prID));
		// request.setAttribute("url", "blank.html");
		if (prFormList != null && !prFormList.isEmpty()) {
			PrPrForm item = prFormList.get(0);
			request.setAttribute("prForm", item);
		}
		return mapping.findForward("print");
	}

	/**
	 * 查看pr单详细
	 * 
	 * @param prID
	 */
	public ActionForward doSelectPrForm(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		user = (Tuser) request.getSession().getAttribute("logineduser");
		request.setAttribute("emp", user.getEmp());		
		String url = "showPrForm";
		String prID = request.getParameter("prFormID");
		PrPrForm item = this.getPrFormBiz().doSelectByIDWithJBPM(prID);	

		if (item != null) {
			request.setAttribute("url", item.getFormURL());
			request.setAttribute("prForm", item);
			
			if (item.getInfo() != null
					&& item.getInfo() == 1
					&& item.getTempolyeeByApplicantId().getUid().equals(
							user.getEmp().getUid())) {
				url = "SELF";
				request.setAttribute("isWaitting", 1);
			} else if (item.getInfo() != null
					&& item.getInfo() == -1
					&& item.getTempolyeeByApplicantId().getUid().equals(
							user.getEmp().getUid())) {
				url = "reject";
			}

		}
		if (request.getParameter("isTip") != null) {
			url = "showPrFormTip";
			if (request.getParameter("isM") != null) {
				url = "showPrFormMoblieTip";
			}
		}
		//!!!!!!!!!!!!!!!!!!!!!!
		if(PropertiesRead.getInstance().isRelease()){
			if (request.getParameter("admin") != null) {
				url = "admin";
			}
			if(item.getTempolyeeByApplicantId().getUid().equals(user.getEmp().getUid())
					&&(item.getAssignee()==null || !item.getAssignee().equals(user.getEmp().getName()))){	
					request.setAttribute("url", "blank.html");			
			}
			if(item.getInfo() != null && (item.getInfo() == -1 || item.getInfo() == 1)
					&& !item.getTempolyeeByApplicantId().getUid().equals(user.getEmp().getUid())){	
					request.setAttribute("url", "blank.html");			
			}
			if(item.getAssignee()!=null && !item.getAssignee().equals(user.getEmp().getName())){	
					request.setAttribute("url", "blank.html");			
			}
		}
		return mapping.findForward(url);
	}

	/**
	 * 查看我的PR
	 */
	public ActionForward doSelectPrFormList(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		//logger.error("test");
		Tuser user = (Tuser) request.getSession().getAttribute("logineduser");
		String area = request.getParameter("area");// 来源 上海 YT SY
		EporForm eporForm = (EporForm) form;
		PrPrForm item = eporForm.getPrForm();
		// init params
		if (user.getEmp().getEprownerarea() != null) {
			item.setSourceRange(user.getEmp().getEprownerarea());
		}
		if (area != null && !"".equals(area)) {// 指定厂区的查询，可以把本身的厂区限制条件去除
			item.setSourceRange(area);
		}
		String uid = request.getParameter("uid");
		String prNo = request.getParameter("prNo");
		String benginTime = request.getParameter("benginTime");
		String endTime = request.getParameter("endTime");
		// paging params
		String start = request.getParameter("start");
		String limit = request.getParameter("limit");

		Integer departmentId = null, state = null;
		if (request.getParameter("state") != null
				&& !request.getParameter("state").equals("")) {
			state = Integer.parseInt(request.getParameter("state"));
		}
		if (request.getParameter("depart") != null
				&& !request.getParameter("depart").equals("")) {
			departmentId = Integer.parseInt(request.getParameter("depart"));
		}
		if (null != request.getParameter("isFin")
				&& !"".equals(request.getParameter("isFin"))) {
			item.setIsFin(request.getParameter("isFin"));
		}
		if (prNo != null && !prNo.equals("")) {
			item.setSsid(item.getASSID(Integer.parseInt(prNo)));
		}
		item.setTempolyeeByApplicantId(new Tempolyee(uid));
		item.setBegintime(benginTime);
		item.setEndTime(endTime);
		//item.setState(state);
		item.setInfo(state);
		item.getTempolyeeByApplicantId().setTdepartment(
				new Tdepartment(departmentId));

		// 如果是个人查询
		if (request.getParameter("self") == null
				|| !request.getParameter("self").equals("y")) {
			// state > 1
			item.stateLz = "y";
			item.setId("");// 清空id参数

		}
		List<PrPrForm> allrs = new ArrayList<PrPrForm>();
		int totalCount = 0;
		if (request.getParameter("self") != null
				&& request.getParameter("self").equals("y")) {
			item.setTempolyeeByBuyerId("");
			PrProject p = new PrProject();
			p.setManagerUid(null);
			p.setId(0);
			item.setPrProject(p);
			allrs.addAll(this.getPrFormBiz().doSelectLightByPaging(item,
					start, limit));
			totalCount +=this.getPrFormBiz().doSelectLightCount(item);
		}else{			// check rights
			List<String> newrole = this.getPrRightsManager().checkNprRights4All(user.getEmp().getRoleids_b());
			//List<String> r = new ArrayList<String>();
			if(newrole.isEmpty()){
				newrole = user.getEmp().getRoleids_b();
			}
			for (String roleName : newrole) {
				if (roleName.contains("pr") || roleName.contains("PR")) {
						int rs = this.getPrRightsManager().checkNprRights(roleName,user.getEmp(), item);
						if(rs == 1){
							List<PrPrForm> temps = this.getPrFormBiz().doSelectLightByPaging(item,start, limit);
							int mins = 0;
							for(PrPrForm temp:temps){
								boolean flag = true;
								for(PrPrForm form1:allrs){								
									if(form1.getId().equals(temp.getId())){
										flag = false;
										mins++;
										break;
									}	
								}
								if(flag){
									allrs.add(temp);
								}
							}
							//allrs.addAll(temps);
							totalCount +=this.getPrFormBiz().doSelectLightCount(item);
							totalCount = totalCount-mins;
						}
				}
			}
		}
//		this.getPrFormBiz().plusProcessInfo(allrs);
		// ----合并申请表单--------
		List<BaseForm> result = BaseForm.AddOtherForms(allrs);
		MDForm md = eporForm.getMdform();
		md.setTempolyeeByApplicantId(user.getEmp());

		List<BaseForm> Forms = this.getManager().doShow(md);
		result.addAll(Forms);
		//totalCount = 100;
		ToJson.listToJsonArrartAddTotalCount(result, response, totalCount);
		return null;
	}

	/**
	 * 查看权限内待审批的pr单
	 */
	public ActionForward doSelectApprovingPrForms(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		Tuser user = (Tuser) request.getSession().getAttribute("logineduser");
		EporForm eporForm = (EporForm) form;
		PrPrForm item = eporForm.getPrForm();
		// init params
		if (user.getEmp().getEprownerarea() != null) {
			item.setSourceRange(user.getEmp().getEprownerarea());
		}
		String uid = request.getParameter("uid");
		String benginTime = request.getParameter("benginTime");
		String endTime = request.getParameter("endTime");
		String prNo = request.getParameter("prNo");

		// paging params
		String start = request.getParameter("start");
		String limit = request.getParameter("limit");

		Integer departmentId = null, state = null;
		if (request.getParameter("state") != null
				&& !request.getParameter("state").equals("")) {
			state = Integer.parseInt(request.getParameter("state"));
		}
		if (request.getParameter("depart") != null
				&& !request.getParameter("depart").equals("")) {
			departmentId = Integer.parseInt(request.getParameter("depart"));
		}
		if (prNo != null && !prNo.equals("")) {
			item.setSsid(item.getASSID(Integer.parseInt(prNo)));
		}
		item.setTempolyeeByApplicantId(new Tempolyee(uid));
		item.setBegintime(benginTime);
		item.setEndTime(endTime);
		item.setState(state);
		item.flag = true;
		item.getTempolyeeByApplicantId().setTdepartment(
				new Tdepartment(departmentId));

		// 查询相关PR
		List<PrPrForm> rs = this.getPrFormBiz().relationings(user.getEmp(),
				item);
		List<BaseForm> Forms = new ArrayList();
		// check rights
		// for (String roleName : user.getEmp().getRoleids_b()) {
		// if (roleName.contains("PR")) {
		PrPrForm item2 = new PrPrForm();
		item2.flag = true;
		item2.setTempolyeeByApplicantId(new Tempolyee(uid));
		item2.setBegintime(benginTime);
		item2.setEndTime(endTime);
		item2.setState(state);

		item2.setSourceRange(item.getSourceRange());
		if (prNo != null && !prNo.equals("")) {
			item2.setSsid(item.getASSID(Integer.parseInt(prNo)));
		}
		item2.getTempolyeeByApplicantId().setTdepartment(
				new Tdepartment(departmentId));

		rs.addAll(this.getPrFormBiz().doQueryApprovingList(
				user.getEmp().getNetid(),user.getEmp().getName(), item2));
		//add authorized
		AuthorizedImpl authimpl = this.getAuthImpl();
		List<PrPrForm> authRs = authimpl.hasAuthorized(user.getEmp().getUid());
		
		rs.addAll(authRs);
		// -- skip 4 code
		 for (String roleName : user.getEmp().getRoleids_b()) {
			 if (roleName.contains("DM")) {
			 MDForm md = eporForm.getMdform();
			 this.getMdRightsManager().checkRight(roleName, user.getEmp(),
			 md);
			 Forms.addAll(this.getManager().doShow(md));
			 }
		 }
		int totalCount = rs.size();
		// ----合并申请表单--------
		List<BaseForm> result = BaseForm.AddOtherForms(rs);
		// MDForm md = eporForm.getMdform();
		// this.getMdRightsManager().checkRights("MD", user.getEmp(), md);

		result.addAll(Forms);
		// result.addAll(this.getManager().doShow(md));
		ToJson.listToJsonArrartAddTotalCount(result, response, totalCount);
		return null;
	}

	/**
	 * 审批pr
	 */
	public ActionForward doApprovePR(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		EporForm eporForm = (EporForm) form;
		user = (Tuser) request.getSession().getAttribute("logineduser");
		FormFile file = eporForm.getFormFile();// 取得上传的文件
		if (file != null && file.getFileSize() != 0) {
			String filePath = uploadUrl;// request.getRealPath("/uploadFolder");//上传到指定的upload包中
			UploadFile uf = new UploadFile();
			eporForm.getApprovedPR().getPrPrForm().setNorth_AmericaFileName(
					"AmericaFileName"
							+ uf.uFile(file, filePath, eporForm.getApprovedPR()
									.getPrPrForm().getId(), "AmericaFileName"));
		}
		FormFile file2 = eporForm.getBuyerFile();
		if (file2 != null && file2.getFileSize() != 0) {
			String filePath = uploadUrl;// request.getRealPath("/uploadFolder");//上传到指定的upload包中
			UploadFile uf = new UploadFile();
			eporForm.getApprovedPR().getPrPrForm().setBuyerFile(
					"buyerFile"
							+ uf.uFile(file2, filePath, eporForm.getApprovedPR()
									.getPrPrForm().getId(), "buyerFile"));
		}
		PrFormBizImpl manager = this.getPrFormBiz();
		eporForm.getApprovedPR().setTempolyee(user.getEmp());
		manager.doApprovePR(eporForm.getApprovedPR());
		 //manager.doBack(eporForm.getApprovedPR().getPrPrForm().getProcessInstanceId());
		return mapping.findForward("success");
	}

	/**
	 * 采购员需要填写进SAP数据
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward goTOSAP(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		String prID = request.getParameter("id");
		String type = request.getParameter("type");

		PrPrForm item = new PrPrForm();
		item.setId(prID);

		user = (Tuser) request.getSession().getAttribute("logineduser");
		PrApprovedForm af = new PrApprovedForm();
		af.setIsApproved(1);
		af.setDatetime(new Date());
		af.setTempolyee(user.getEmp());
		String context = request.getParameter("approvedPR.context");
		if (type != null && type.equals("f")) {
			context += "PCL 退回到财务";
		}
		if (type != null && type.equals("e")) {
			context += "采购： 由系统外转系统内";
			item.setIsInTheSap(1);
		}
		af.setContext(context);
		af.setPrPrForm(item);
		item.setState(StateManager.SELF);
		this.getPrFormBiz().doApprovePR(af);
		item.setState(StateManager.FEEDBACK);
		this.getPrFormBiz().doUpdatePRFrom(item, user.getEmp());
		return mapping.findForward("success");
	}

	// /**
	// * 批量审批
	// *
	// * @param mapping
	// * @param form
	// * @param request
	// * @param response
	// * @return
	// */
	// public ActionForward doPApprove(ActionMapping mapping, ActionForm form,
	// HttpServletRequest request, HttpServletResponse response) {
	//
	// String[] prId = request.getParameter("prformId").split(",");
	// String[] type = request.getParameter("type").split(",");
	// Integer[] version = MyUtil.toTransFormInteger(request.getParameter(
	// "version").split(","));
	// Integer[] state = MyUtil.toTransFormInteger(request.getParameter(
	// "state").split(","));
	// Float[] total = MyUtil.toTransFormFloat(request.getParameter("total")
	// .split(","));
	// Integer[] isPlan = MyUtil.toTransFormInteger(request.getParameter(
	// "isPlan").split(","));
	// Integer[] isCapital = MyUtil.toTransFormInteger(request.getParameter(
	// "isCapital").split(","));
	// user = (Tuser) request.getSession().getAttribute("logineduser");
	// for (int i = 0; i < prId.length; i++) {
	// PrApprovedForm af = new PrApprovedForm();
	// PrPrForm pf = new PrPrForm();
	// pf.setId(prId[i]);
	// pf.setVersion(version[i]);
	// pf.setState(state[i]);
	// pf.setIsCapital(isCapital[i]);
	// pf.setIsPlan(isPlan[i]);
	// pf.setTotal(total[i]);
	// if (type != null && type.length > 0) {
	// pf.setType(type[i]);
	// }
	// af.setIsApproved(1);
	// af.setDatetime(new Date());
	// af.setTempolyee(user.getEmp());
	// af.setPrPrForm(pf);
	// this.getPrFormBiz().doApprovePR(af);
	// }
	// //
	// return null;
	// }

	/**
	 * 删除pr
	 */
	public ActionForward doDeletePR(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		String prId = request.getParameter("prId");
		PrPrForm item = new PrPrForm(prId);
		item.setId(prId);
		boolean flag = this.getPrFormBiz().doDelete(item);
		if (flag) {

		} else {

		}
		return mapping.findForward("success");
	}

	/**
	 * download the prform
	 */
	public ActionForward downloadPR(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		String fileName = request.getParameter("");
		DownLoad dl = new DownLoad();
		fileName = "D://jakarta-tomcat-5.5.9//webapps//bpp//uploadFolder//README.txt";
		dl.dLoad(request, response, fileName);
		return null;
	}

	/**
	 * 添加采购员
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward doAddBuyer(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		String uid = request.getParameter("uid");
		String name = request.getParameter("name");
		PrBuyer item = new PrBuyer(uid, name);
		this.getPrFormBiz().doAddBuyer(item);
		return null;
	}

	/**
	 * 删除采购员
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward doDelBuyer(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		String key = request.getParameter("uid");
		this.getPrFormBiz().doDelBuyer(key);
		return null;
	}

	public ActionForward doAddCostCentre(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		String englishName = request.getParameter("englishName");
		String name = request.getParameter("name");
		String remark = request.getParameter("remark");
		// PrBuyer item = new PrBuyer(uid,name);
		PrCostCenter item = new PrCostCenter(name, englishName);
		item.setRemark(remark);
		this.getPrFormBiz().doAdd(item);
		return null;
	}

	public ActionForward doUpdateCostCentre(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		String englishName = request.getParameter("englishName");
		String name = request.getParameter("name");
		String remark = request.getParameter("remark");
		Integer id = Integer.parseInt(request.getParameter("id"));
		// PrBuyer item = new PrBuyer(uid,name);
		PrCostCenter item = new PrCostCenter(name, englishName);
		item.setRemark(remark);
		item.setId(id);
		this.getPrFormBiz().doUpdate(item);
		return null;
	}

	public ActionForward doDelCostCentre(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		// String englishName=request.getParameter("englishName");
		// String name=request.getParameter("name");
		// String remark=request.getParameter("remark");
		Integer id = Integer.parseInt(request.getParameter("id"));
		// PrBuyer item = new PrBuyer(uid,name);
		PrCostCenter item = new PrCostCenter();
		// item.setRemark(remark);
		item.setId(id);
		this.getPrFormBiz().doDelCostCenter(item);
		return null;
	}

	/** ------------Project------------------- */

	public ActionForward doAddProject(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		String managerUid = request.getParameter("managerUid");
		String sapNo = request.getParameter("sapNo");
		String context = request.getParameter("context");
		// Integer id=Integer.parseInt(request.getParameter("id"));
		// PrBuyer item = new PrBuyer(uid,name);
		PrProject item = new PrProject();
		// item.setRemark(remark);
		// item.setId(id);
		item.setContext(context);
		item.setManagerUid(managerUid);
		item.setProjectId(sapNo.substring(4, sapNo.length()));
		item.setSapNo(sapNo);
		this.getPrFormBiz().doAddProject(item);
		return null;
	}

	public ActionForward doSelProjecet(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		Integer id = Integer.parseInt(request.getParameter("id"));
		// Subject item = new Subject();
		// item.setId(id);
		request.setAttribute("rs", this.getPrFormBiz().doSelectProject(id));
		return mapping.findForward("updateProject");
	}

	public ActionForward doUpdateProject(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		String projectId = request.getParameter("projectId");
		String sapNo = request.getParameter("sapNo");
		String context = request.getParameter("context");
		String managerUid = request.getParameter("managerUid");
		String number = request.getParameter("number");
		Integer id = Integer.parseInt(request.getParameter("id"));
		PrProject item = new PrProject();
		item.setNumber(number);
		item.setId(id);
		item.setProjectId(projectId);
		item.setSapNo(sapNo);
		item.setManagerUid(managerUid);
		item.setContext(context);
		this.getPrFormBiz().doUpdateProject(item);
		return null;
	}

	public ActionForward doDelProject(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		Integer id = Integer.parseInt(request.getParameter("id"));
		PrProject item = new PrProject();
		item.setId(id);
		this.getPrFormBiz().doDelProject(item);
		return null;
	}

	/** ------------Subject------------------- */
	public ActionForward doAddSubject(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		String number = request.getParameter("number");
		String descrption = request.getParameter("descrption");
		String remark = request.getParameter("remark");
		Subject item = new Subject();
		item.setNumber(number);
		item.setDescrption(descrption);
		item.setRemark(remark);
		this.getPrFormBiz().doAddSubjecet(item);
		return null;
	}

	public ActionForward doDelSubject(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		Integer id = Integer.parseInt(request.getParameter("id"));
		Subject item = new Subject();
		item.setId(id);
		this.getPrFormBiz().doDelSubjecet(item);
		return null;
	}

	public ActionForward doSelSubject(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		Integer id = Integer.parseInt(request.getParameter("id"));
		// Subject item = new Subject();
		// item.setId(id);
		request.setAttribute("rs", this.getPrFormBiz().doSelectSubjecet(id));
		return mapping.findForward("updateSubject");
	}

	public ActionForward doUpdateSubject(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		String number = request.getParameter("number");
		String descrption = request.getParameter("descrption");
		String remark = request.getParameter("remark");
		Integer id = Integer.parseInt(request.getParameter("id"));
		Subject item = new Subject();
		item.setId(id);
		item.setNumber(number);
		item.setDescrption(descrption);
		item.setRemark(remark);
		this.getPrFormBiz().doUpdateSubjecet(item);
		return null;
	}

	/**
	 * 撤回审批意见
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws UnsupportedEncodingException
	 */
	public ActionForward doCancelSuggetsion(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws UnsupportedEncodingException {
		request.setCharacterEncoding("utf-8");
		String id = request.getParameter("id");
		int state = Integer.parseInt(request.getParameter("state"));
		user = (Tuser) request.getSession().getAttribute("logineduser");
		PrPrForm prForm = new PrPrForm();
		prForm.setId(id);
		// int state = StateManager.getStateBySuggestionType(type);
		if (state > 0) {
			prForm.setState(state);
			this.getPrFormBiz().doUpdatePRFrom(prForm, user.getEmp());
		}
		return null;
	}

	/**
	 * 为安诺查询专用 金额大于500K
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward doSelect4Anuo(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		Tuser user = (Tuser) request.getSession().getAttribute("logineduser");
		String area = request.getParameter("area");// 来源 上海 YT SY
		EporForm eporForm = (EporForm) form;
		PrPrForm item = eporForm.getPrForm();
		// init params
		if (user.getEmp().getEprownerarea() != null) {
			item.setSourceRange(user.getEmp().getEprownerarea());
		}
		if (area != null && !"".equals(area)) {// 指定厂区的查询，可以把本身的厂区限制条件去除
			item.setSourceRange(area);
		}
		String uid = request.getParameter("uid");
		String prNo = request.getParameter("prNo");
		String benginTime = request.getParameter("benginTime");
		String endTime = request.getParameter("endTime");
		// paging params
		String start = request.getParameter("start");
		String limit = request.getParameter("limit");

		Integer departmentId = null, state = null;
		if (request.getParameter("state") != null
				&& !request.getParameter("state").equals("")) {
			state = Integer.parseInt(request.getParameter("state"));
		}
		if (request.getParameter("depart") != null
				&& !request.getParameter("depart").equals("")) {
			departmentId = Integer.parseInt(request.getParameter("depart"));
		}
		if (null != request.getParameter("isFin")
				&& !"".equals(request.getParameter("isFin"))) {
			item.setIsFin(request.getParameter("isFin"));
		}
		if (prNo != null && !prNo.equals("")) {
			item.setSsid(item.getASSID(Integer.parseInt(prNo)));
		}
		item.setTempolyeeByApplicantId(new Tempolyee(uid));
		item.setBegintime(benginTime);
		item.setEndTime(endTime);
		// item.setState(state);
		item.setTotal(500000f);// 大于500K
		item.getTempolyeeByApplicantId().setTdepartment(
				new Tdepartment(departmentId));
		int totalCount_relations = 0;

		List<PrPrForm> rs = this.getPrFormBiz().doSelectLightByPaging(item,
				start, limit);
		int totalCount = this.getPrFormBiz().doSelectLightCount(item)
				+ totalCount_relations;

		ToJson.listToJsonArrartAddTotalCount(rs, response, totalCount);
		return null;
	}

	/**
	 * 确认付款
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward doConfirmPayDetails(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		String[] prids = request.getParameterValues("prid");
		String[] ios = request.getParameterValues("io");
		int[] ids = MyUtil.toTransFormInt(request.getParameterValues("id"));
		int[] isPaieds = MyUtil.toTransFormInt(request
				.getParameterValues("isPaied"));
		float[] f_amounts = MyUtil.toTransFormfloat(request
				.getParameterValues("f_amount"));
		String[] f_dates = request.getParameterValues("f_date");
		// String method = request.getParameter("m");
		List<Paydetails> items = new ArrayList<Paydetails>();

		for (int i = 0; i < ids.length; i++) {
			Paydetails item = new Paydetails();
			item.setId(ids[i]);
			item.setIo(ios[i]);
			item.setPRID(prids[i]);
			item.setF_amount(f_amounts[i]);
			item.setF_date(f_dates[i]);
			item.setIsPaied(isPaieds[i]);
			items.add(item);
		}

		// if(method!=null && method.equals("save")){
		getPaydetailsService().add(items);
		// }

		return mapping.findForward("success");
	}

	public ActionForward doTranstoZhu(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		PrPrForm prForm = new PrPrForm();
		String id = request.getParameter("id");
		int state = Integer.parseInt(request.getParameter("state"));
		int source = Integer.parseInt(request.getParameter("source"));
		prForm.setId(id);
		prForm.setState(state);
		prForm.setSource(source);
		this.getPrFormBiz().doUpdatePRFrom(prForm, user.getEmp());
		return mapping.findForward("success");
	}

	public ActionForward doDownReport(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		PCLPostingDate ma = null;
		// FormFile file = null ;
		InputStream in = null;
		String fileName = null;
		String type = request.getParameter("type");
		String sql = request.getParameter("sql");
		// ------String sql ;//= request.getParameter("sql");
		// sql = " applicantid='0268' year(applicant_date)=2013 and state <> 11
		// and state = 11 and pf.source = 1 and and pf.source = 2
		// ";applicant_date>'2012-12-01'
		// sql = "and pf.source = 1 and state >=1 and applicant_date >
		// '2013-6-5' ";

		// sql=" and state >0 and e.departmentid='10058' and
		// year(applicant_date)=2013 ";
		if (type != null && type.equals("1")) {
			ma = this.getP4PR();
		} else if (type != null && type.equals("2")) {
			ma = this.getApprovedDate();
		} else {
			ma = this.getPpd();
			EporForm eporForm = (EporForm) form;
			FormFile file = eporForm.getFormFile();// 取得上传的文件
			try {
				in = file.getInputStream();
			} catch (FileNotFoundException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			fileName = file.getFileName();
		}

		try {
			ma.getData(in, fileName, response, sql);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		return null;
	}

	/**
	 * 下载附件
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward doGetAttach(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		UploadFile u = new UploadFile();
		String path = request.getParameter("path");
		String localAdd = uploadUrl + path;
		u.getFile(response, localAdd);
		return null;
	}

	public ActionForward queryPic(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws IOException {
		String pid = request.getParameter("pid");
		PRProcessEngine eng = null;// = PRProcessEngine.newInstance();
		int[] point = eng.getProcessImageCoordinates(pid);
		request.setAttribute("point", point);
		return mapping.findForward("processImg");
	}
	
	public ActionForward testmail(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws IOException {
		logger.error("test sending mail");
		this.getMailManager().sendMail();
		return null;
	}

	public ActionForward doDeploy(ActionMapping mapping, ActionForm form,
	 HttpServletRequest request, HttpServletResponse response) throws IOException{
		System.out.print("test");
	 PRProcessEngine eng = this.getPRProcessEngine();
	 eng.deploy();
	 return null;//mapping.findForward("success");
	 }
	
	public ActionForward changeApprovor(ActionMapping mapping, ActionForm form,
			 HttpServletRequest request, HttpServletResponse response) throws IOException{
		 	
		 Tools tools = this.getTools();
		 PrPrForm item = new PrPrForm();
		 String id = request.getParameter("ssid");
		 int ssid = 0;
		 int realssid;
		 if(id != null){
			 ssid = Integer.parseInt(request.getParameter("ssid"));
		 }
		 String newApprovor = request.getParameter("netid");
		 String stepName = request.getParameter("stepName");
		 String rid = request.getParameter("realssid");
		 if(null!=rid){
			 realssid = Integer.parseInt(request.getParameter("realssid"));
		 }else{
			 realssid = item.getASSID(ssid);
		 }		 
		 if(realssid != 0){
			 item.setSsid(realssid);
			 String pid = this.getPrFormBiz().doSelect(item).get(0).getProcessInstanceId();
			 //change approver
			 tools.doChangeApprovor(pid, newApprovor, stepName);
			 //change buyer
			 this.getPrFormBiz().doUpdatePRFromBuyerId(realssid,newApprovor);
			 
		 }
		 return mapping.findForward("success");
	}
	
	public ActionForward changeRoute(ActionMapping mapping, ActionForm form,
			 HttpServletRequest request, HttpServletResponse response) throws IOException{
		 	
		 Tools tools = this.getTools();
		 String ssids = request.getParameter("ssid");
		 String stepName = request.getParameter("stepName");
		 String rid = request.getParameter("realssid");
		 if(null!=ssids && ssids.split(",").length > 1){
			 for(String value : ssids.split(",")){
				 int ssid = Integer.parseInt(value);
				 //String newApprovor = request.getParameter("netid");

				 int realssid;
				 PrPrForm item = new PrPrForm();
				 if(null!=rid){
					 realssid = Integer.parseInt(request.getParameter("realssid"));
				 }else{
					 realssid = item.getASSID(ssid);
				 }		 		 		
				 item.setSsid(realssid);
				 String pid = this.getPrFormBiz().doSelect(item).get(0).getProcessInstanceId();
				 tools.doChangeRoute(pid, stepName);
			 }
		 }else{
			 int ssid = Integer.parseInt(request.getParameter("ssid"));
			 //String newApprovor = request.getParameter("netid");
//			 String stepName = request.getParameter("stepName");
//			 String rid = request.getParameter("realssid");
			 int realssid;
			 PrPrForm item = new PrPrForm();
			 if(null!=rid){
				 realssid = Integer.parseInt(request.getParameter("realssid"));
			 }else{
				 realssid = item.getASSID(ssid);
			 }		 		 		
			 item.setSsid(realssid);
			 String pid = this.getPrFormBiz().doSelect(item).get(0).getProcessInstanceId();
			 tools.doChangeRoute(pid, stepName);
		 }

		 return mapping.findForward("success");
	}
	
	public ActionForward dosendmailtest(ActionMapping mapping, ActionForm form,
			 HttpServletRequest request, HttpServletResponse response) throws IOException{
		 MailManager aa=this.getMailManager();
		 //aa.sendMail();	
		// logger.error("test sending mail");
		 return mapping.findForward("success");
	}
	
	public ActionForward doProcessFinNormal(ActionMapping mapping, ActionForm form,
			 HttpServletRequest request, HttpServletResponse response) throws IOException{
		 MailManager aa=this.getMailManager();
		 //aa.sendMail();	
		// logger.error("test sending mail");
		 return mapping.findForward("success");
	}
	
	/**
	 * 申请单一供应商
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws IOException
	 */
	public ActionForward doSingle(ActionMapping mapping, ActionForm form,
			 HttpServletRequest request, HttpServletResponse response) throws IOException{
		EporForm eporForm = (EporForm) form;
		SingleForm singleForm = eporForm.getSingleForm();
		user = (Tuser) request.getSession().getAttribute("logineduser");
		
		singleForm.setApplicantId(user.getEmp());
		//SimpleDateFormat sf = new SimpleDateFormat();
		//String date = sf.format(new Date());
		singleForm.setRequestdate(new Date());
		
		String[] reason = request.getParameterValues("reason");
		String[] reason2 = request.getParameterValues("reason2");
		
		String rs1 = "";
		if(reason!=null){
			for(int i = 0 ;i<reason.length;i++){
				rs1+=reason[i]+";";
			}
			singleForm.setReason(rs1);
		}
		String rs2 = "";
		if(reason2!=null){
			for(int i = 0 ;i<reason2.length;i++){
				rs2+=reason2[i]+";";
			}
			singleForm.setReason2(rs2);
		}
		
		String no = this.getPrFormBiz().saveSingleForm(singleForm);
		singleForm.setSno(no);
		request.setAttribute("singleForm", singleForm);
		ActionForward af = new ActionForward();
		if(singleForm.getSupplier()!=null && !"".equals(singleForm.getSupplier())){
			af.setPath("/epor/baseInfo/printUGForm.jsp");
		}else{
			af.setPath("/epor/baseInfo/printSingleForm.jsp");
		}
		
		
		return af;
	}
}