/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package app.web.struts.action;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import sdaac.wym.app.Hr.DepartmentIndexStateManager;
import sdaac.wym.app.entity.hr.DepartmentState;

import common.entity.MyMail;
import common.util.ConfigureReader;
import common.util.DownLoad;
import common.util.ExcelReader;
import common.util.MyUtil;

import app.web.struts.form.EmpIndexForm;

import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;

import app.biz.impl.KpiAccount;
import app.common.CreateEmpIndexExcel;
import app.common.EmpIndexExcel;
import app.common.KpiAccountExcel;
import app.entity.TcompanyIndex;
import app.entity.Tdepartment;
import app.entity.TempIndex;
import app.entity.Tempolyee;
import app.entity.TindexTarget;
import app.entity.Tuser;

/** 
 * MyEclipse Struts
 * Creation date: 03-11-2009
 * 
 * XDoclet definition:
 * @struts.action path="/empIndex" name="empIndexForm" input="/form/empIndex.jsp" parameter="actionType" scope="request" validate="true"
 */

public class EmpIndexAction extends BaseAction {
	/*
	 * Generated Methods
	 */

	/**
	 * 查询员工指标,能更改
	 */
//	public ActionForward doSelectByEmpId(ActionMapping mapping, ActionForm form,
//			HttpServletRequest request, HttpServletResponse response) {
//		
//		String empId=request.getParameter("empId");
//		//get the emp's all index
//		List<TempIndex> empList=this.getEmpIndexBiz().doSelectByUid(empId);
//		List<TempIndex> empIndexs=new LinkedList<TempIndex>();
//		
//		//取得公司的指标
//		String version=request.getParameter("version");	
//		List<TcompanyIndex> companyIndexs=this.getDepartIndexBiz().doSelectCompanyIndex(1,version);
//		//取得不是公司的指标
//		for(TempIndex elem:empList)
//		{
//			if(elem.getIndex().getDepartID()!=1)
//			{
//				empIndexs.add(elem);
//			}
//		}
//		request.setAttribute("companyIndexs", companyIndexs);
//		request.setAttribute("empIndexs", empIndexs);//
//		request.setAttribute("empList",empList);
//		String uname=this.getEmpBiz().doSelectById(empId);
//		request.setAttribute("empName",uname);
//		return mapping.findForward("empIndexShow");
//	}
	/**
	 * 查询员工指标 by Admin
	 */
//	public ActionForward doSelectByEmpIdR(ActionMapping mapping, ActionForm form,
//			HttpServletRequest request, HttpServletResponse response) {
//		//EmpIndexForm empIndexForm = (EmpIndexForm) form;// TODO Auto-generated method stub
//		String empId=request.getParameter("empId");
//		List<TempIndex> empList=this.getEmpIndexBiz().doSelectByUid(empId);
//		request.setAttribute("empList",empList);
//		String uname=this.getEmpBiz().doSelectById(empId);
//		request.setAttribute("empName",uname);
//		return mapping.findForward("empIndexShowR");
//	}
	
	/**
	 * 更新，填写员工指标 
	 */
	public ActionForward updateEmpIndex(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		EmpIndexForm empIndexForm = (EmpIndexForm) form;// TODO Auto-generated method stub
		List<TempIndex> empIndexs=empIndexForm.getItems();
		for(TempIndex empIndex:empIndexs)
		{
			TindexTarget indexTarget=this.getIndexBiz().selectByIndexName(empIndex.getIndex().getName());
			empIndex.setIndex(indexTarget);
			this.getEmpIndexBiz().doUpdate(empIndex);
		}
		return mapping.findForward("MyCompanyIndex");
	}
	/**
	 * 查看部门指标状态
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward showDepartmentIndexState(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		request.setAttribute("item", this.getDepartmentIndexStateManager().show());
		return mapping.findForward("KpiState");
	}
	/**
	 * 更新指标状态
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward updateDepartmentIndexState(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		int id=Integer.parseInt(request.getParameter("id"));
		String context=request.getParameter("context");
		int state=Integer.parseInt(request.getParameter("state"));
		DepartmentState item=new DepartmentState();
		item.setContext(context);
		item.setId(id);
		item.setState(state);
		this.getDepartmentIndexStateManager().updateState(item);
		return null;//mapping.findForward("showKpiState");
	}
	
	/**
	 * 确认指标完成
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward checkDepartmentIndexState(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		Tuser user=(Tuser)request.getSession().getAttribute("logineduser");
		int departId=user.getEmp().getTdepartment().getId();
		//根据部门id更新指标说明
		this.getDepartmentIndexStateManager().updateStateByDepartmentId(departId);
		ConfigureReader cr=new ConfigureReader();
		String toSB=cr.getSDAACConf("HR_MANAGER_UID");
		//添加mail列表
		MyMail mail=new MyMail(toSB,"KPI_CONFIRM",user.getEmp().getTdepartment().getName()+"等待审批",0);				
		this.getMailManager().addMailList(mail);
		return null;//mapping.findForward("showKpiState");
	}
	
	/**
	 * 插入员工指标
	 */
	public ActionForward doInsertEmpIndicators(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
//		/**
//		 * 临时修改：可以由excel到入
//		 */
//		List<TempIndex> empIndexs=new ArrayList<TempIndex>();
//		String fileName=request.getRealPath("/uploadFolder")+"\\财务.xls";
//		try {
//			
//			ExcelReader excelReader=new ExcelReader(fileName);
//			List<Object[]> results=excelReader.getList();
//			 for (Object[] objects : results) {
//				 TempIndex item=new TempIndex();
//				//new index
//				 TindexTarget index=new TindexTarget();
//				 index.setA(objects[2].toString());
//				 index.setB(objects[3].toString());
//				 index.setC(objects[4].toString());
//				 index.setName(objects[0].toString());
//				 index.setFormula(objects[1].toString());
//				 index.setDepartID(3);
//				 index.setIsChoice("必选");
//				 index.setVersion("2009-07");
//				 index.setType(objects[7].toString());
//				 //new empIndex
//				 item.setIndex(index);
//				 if(!objects[5].toString().equals(""))
//				 {
//				 item.setPercentage(Float.parseFloat(objects[5].toString())*100);
//				 }
//				 item.setTempolyee(new Tempolyee(objects[6].toString()));
//				 //add list
//				 empIndexs.add(item);
//			 }
//			
//		} catch (IOException e) {
//			// TODO Auto-generated catch block
//			e.printStackTrace();
//		} catch (Exception e) {
//			// TODO Auto-generated catch block
//			e.printStackTrace();
//		}
//		
//		/**
//		 * 部门编号
//		 */
//		Integer departId=10047;//ehs
//		
//		/**end*/
		EmpIndexForm empIndexForm = (EmpIndexForm) form;// TODO Auto-generated method stub
		List<TempIndex> empIndexs=empIndexForm.getItems();	//add new empindex
		String uid=request.getParameter("uid");//员工工号
		Integer departId=this.getEmpBiz().doSelect(new Tempolyee(uid)).getTdepartment().getId();
		

		Integer[] empIndexIDs=MyUtil.toTransFormInteger(request.getParameterValues("empIndexID")); //wait for update IndexsID
		Float[] percentages=MyUtil.toTransFormFloat(request.getParameterValues("fpercentage"));//wait for update weight
		String[] outputs=request.getParameterValues("fact_output");//wait for update output
		Float[] scores=MyUtil.toTransFormFloat(request.getParameterValues("score"));
		Integer[] names=MyUtil.toTransFormInteger(request.getParameterValues("fdpIndex")); // is choiced index to the emp
		String[] checkFlags=request.getParameterValues("checkFlag");// is choice
		//Tuser user=(Tuser)request.getSession().getAttribute("logineduser");
		String version = request.getParameter("version");// 获得版本信息
		if(version==null||version.equals(""))
		{
			version=Calendar.YEAR+"-"+Calendar.MONTH;
		}
		//choice the indexs to the emp
		if(checkFlags!=null)
		{
			for(int i=0;i<checkFlags.length;i++)
			{
				int j=Integer.parseInt(checkFlags[i]);
			
					TempIndex empIndex=new TempIndex();
					empIndex.setIndex(new TindexTarget(names[j]));
					empIndex.setTempolyee(new Tempolyee(uid));
					this.getEmpIndexBiz().doInsert(empIndex);
				
			}
		}
	
		
		if(empIndexs.size()!=0)
		{
			for(TempIndex empIndex:empIndexs)
			{
				if(empIndex.getIndex().getName()!=null)
				{
					empIndex.setTempolyee(new Tempolyee(uid));	
					empIndex.getIndex().setVersion(version);
					empIndex.getIndex().setDepartID(3);
					this.getEmpIndexBiz().doInsertIndex(empIndex,departId);
				}
			}
		}
		//update indexs'output,weight,score
		if(empIndexIDs!=null)
		{
			for(int i=0;i<empIndexIDs.length;i++)
			{
				if(percentages[i]!=0.0)
				{
					TempIndex item=new TempIndex();
					item.setAct_output(outputs[i]);
					item.setPercentage(percentages[i]);
					item.setId(empIndexIDs[i]);
					item.setScore(scores[i]);
					this.getEmpIndexBiz().doUpdate(item);
				}
			}
		}
		String path="/index.do?actionType=doSelectEmpIndex&empUid="+uid;
		ActionForward af=new ActionForward(path);
		
		return af;
	}
	/**
	 * 导出全公司kpi
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward doDownLoadKpiAccount(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		List<KpiAccount> kpiList= this.getEmpBiz().doAccount(new Tempolyee(),"2010-03");
		
		SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd-HH-mm-ss");
		String now=sdf.format(new Date());
		String fileName=request.getRealPath("/")+"excelDown\\KpiAccount_"+now+".xls";	
		KpiAccountExcel kpiAccountExcel;
		try {
			kpiAccountExcel=new KpiAccountExcel(fileName);
			kpiAccountExcel.write(kpiList);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		DownLoad dl=new DownLoad();
		dl.dLoad(request, response, fileName);
		
		
	
		return null;
	}
	
	
	/**导数据*/
	public ActionForward ss(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
//		/**
//		 * 临时修改：可以由excel到入
//		 */
		List<TempIndex> empIndexs=new ArrayList<TempIndex>();
		String fileName="E:\\IT_部门人员KPI上传模板.xls";
		try {
			
			ExcelReader excelReader=new ExcelReader(fileName);
			List<Object[]> results=excelReader.getList();
			 for (Object[] objects : results) {
				 TempIndex item=new TempIndex();
				//new index
				 TindexTarget index=new TindexTarget();
				 index.setA(objects[4].toString());
				 index.setB(objects[5].toString());
				 index.setC(objects[6].toString());
				 index.setName(objects[0].toString());
				 index.setFormula(objects[1].toString());
				 index.setDepartID(3);
				 index.setIsChoice("必选");
				 index.setVersion("2012-06");
				 index.setType("非量化指标");
				 int departId = Integer.parseInt(objects[9].toString());		 
				 //new empIndex
				 item.setIndex(index);

				 if(!objects[7].toString().equals(""))
				 {
					 item.setPercentage(Float.parseFloat(objects[7].toString()));
				 }
				 	item.setTempolyee(new Tempolyee(objects[8].toString()));
				 //add list
//				 empIndexs.add(item);
					System.out.println(">>>>>>>>>>>>>>>"+objects[8].toString());
					this.getEmpIndexBiz().doInsertIndex(item,departId);
			 }
			
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
//		/**
//		 * 部门编号
//		 */
//		Integer departId=10025;//ehs				
//		if(empIndexs.size()!=0)
//		{
//			for(TempIndex empIndex:empIndexs)
//			{
//					System.out.println(">>>>>>>>>>>>>>>"+empIndex.getTempolyee().getUid());
//					this.getEmpIndexBiz().doInsertIndex(empIndex,departId);
//			}
//		}	
		return null;
	}
	
	
}