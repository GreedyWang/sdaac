/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package app.web.struts.action;

import java.io.IOException;
import java.io.PrintWriter;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import net.sf.json.JSONArray;

import org.apache.commons.collections.map.ListOrderedMap;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import sdaac.wym.app.entity.vave.ApproveRateItem;

import common.entity.TuserRole;
import common.util.DownLoad;

import app.common.KpiAccountExcel;
import app.common.VaveCountExcel;
import app.common.web.ToJson;
import app.entity.Tempolyee;
import app.entity.vave.Count;
import app.entity.vave.FatherCount;
import app.entity.vave.Pcount;
import app.web.struts.form.StatisticsForm;

/** 
 * MyEclipse Struts
 * Creation date: 04-08-2009
 * 
 * XDoclet definition:
 * @struts.action path="/statistics" name="statisticsForm" input="/form/statistics.jsp" parameter="actionType" scope="request" validate="true"
 */
public class StatisticsAction extends BaseAction {

	
	public ActionForward countDownLoad(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		Integer year=null;
		if(request.getParameter("searchYear")!=null)
		{
			year=Integer.parseInt(request.getParameter("searchYear"));
		}	
		if(year==null||year.equals(""))
		{
			year=new Date().getYear()+1900;
		}
		List<Pcount> rs=this.doPersonalProposalCount(year,null);
		
		SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd-HH-mm-ss");
		String now=sdf.format(new Date());
		String fileName=request.getRealPath("/")+"excelDown\\VAVEAccount_"+now+".xls";	
		VaveCountExcel vaveCountExcel;
		try {
			vaveCountExcel=new VaveCountExcel(fileName);
			vaveCountExcel.write(rs);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		DownLoad dl=new DownLoad();
		dl.dLoad(request, response, fileName);
		return null;
	}
	
	
	/**
	 * ext_count
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward count(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		Integer year=null,m=null;
		if(request.getParameter("searchYear")!=null)
		{
			year=Integer.parseInt(request.getParameter("searchYear"));
			if(request.getParameter("m") != null && !request.getParameter("m").equals("选择季度") && !request.getParameter("m").equals(""))
				m = Integer.parseInt(request.getParameter("m"));
		}	
		if(year==null||year.equals(""))
		{
			year=new Date().getYear()+1900;
		}
		List<Pcount> list2=this.doPersonalProposalCount(year,m);
		ToJson.listToJsonArrart(list2, response);
//		
//		JSONArray ja=JSONArray.fromObject(list2);
//		PrintWriter out;
//		try {
//			response.setCharacterEncoding("utf-8");
//			out = response.getWriter();
//			out.print(ja.toString()); 
//		} catch (IOException e) {
//			e.printStackTrace();
//		}
		
		
	//	request.setAttribute("year", year);
		return null;//mapping.findForward("depart");
	}
	
	
	/**
	 * no use
	 *  部门提案统计[部门，提案数，批准数，完成数]
	
	public ActionForward doDepartProposalCount(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		Integer year=null;
		if(request.getParameter("searchYear")!=null)
		{
			year=Integer.parseInt(request.getParameter("searchYear"));
		}
			
		if(year!=null&&!year.equals(""))
		{
			
		}
		else
		{
			
			year=new Date().getYear()+1900;
		}
		String sql=	"select tdemp.name as departmentid,"+
		"sum(case when state>=0 then 1 else 0 end) as [all], "+
		"sum(case when state>3 then 1 else 0 end) as [approval], "+
		"sum(case when state>5 then 1 else 0 end) as [finish] "+
	   " from dbo.tProposal as p inner join dbo.tEmpolyee as emp "+
		"on p.collection_persion=emp.uid "+
		"inner join dbo.tDepartment as tdemp "+
		"on tdemp.id=emp.departmentid "+
		" where year(lastModifyTime)="+year+
		" and state>0"+
		" and p.source='公司'"+
		" group by tdemp.name";
		
		String sql2="select d.name,count(DISTINCT a.id),0,0 from dbo.tProposal as a "+
						"inner join dbo.tEmpolyee as b "+
						"on a.proposal_person=b.uid "+
						"inner join dbo.tMainSuggestion as c "+
						"on c.proposalID=a.id "+
						"inner join dbo.tDepartment as d on d.id=b.departmentid "+
						"where source='公司' "+
						"and year(lastModifyTime)="+year+
						"and state=0 "+
						"group by d.name ";	
		List<Count> list=this.getJdbcTemplateImpl().doSelectSQl(sql);
		List<Count> listTwo=this.getJdbcTemplateImpl().doSelectSQl(sql2);
		if(list!=null&&!list.isEmpty())
		{		
			this.sortCount(list,listTwo); 
			request.setAttribute("departProposalCount", list );
		}
		//个人提案统计
		List<Pcount> list2=this.doPersonalProposalCount(year);
		if(list2!=null&&!list2.isEmpty())
		{
			request.setAttribute("personalProposal",list2);
		}
		List<Count> list3=this.doSupplyCount(year);
		if(list3!=null&&!list3.isEmpty())
		{		
			list3=this.sortCount( list3); 
			request.setAttribute("SupplyCount",list3);
		}
		
		
		
		request.setAttribute("year", year);
		return mapping.findForward("depart");
	}
	 */
	
	private String getSql(Integer year,Integer m){
		 
		String h = "select [all],approval,finish,d.name as departName,e.name as empName,hlh,WAITCHANGE,DO_PROJECT,BEGIN_PROJECT,pd.total_saving  from  tEmpolyee as e"+
					" inner join  (select emp.uid as empUid,"+
					" sum(case when state>=0 then 1 else 0 end) as [all], "+
					" sum(case when state>3 then 1 else 0 end) as [approval], "+
					" sum(case when state=7 then 1 else 0 end) as [finish] ,"+
					" sum(case when state=8 then 1 else 0 end) as [hlh] ,"+
					" sum(case when state=9 then 1 else 0 end) as [WAITCHANGE] ,"+
					" sum(case when state=6 then 1 else 0 end) as [DO_PROJECT] ,"+
					" sum(case when state=4 then 1 else 0 end) as [BEGIN_PROJECT] "+
					" from dbo.tProposal as p inner join dbo.tEmpolyee as emp "+
					" on p.collection_persion=emp.uid "+
					" where p.source='公司'"+
					" and year(lastModifyTime)="+year;
		if(m != null && !m.equals("")){
			int a = m*3;
			int b = a-1;
			int c = b-1;
			h += " and month(lastModifyTime) in ("+a+","+b+","+c+")";
		}
		h += " and state>0"+
			" group by emp.uid) as cc "+
			" on e.uid = cc.empUid"+
			" inner join dbo.tDepartment as d on d.id=e.departmentid"+
			" left join (select * from vave_pointsDetails  where _year="+year+") pd on pd.uid=e.uid"; 
		return h;
	}
	
	private String getSql2(Integer year,Integer m){
		
		String h = "select total,0 as approval,0 as finish,d.name as departName,emp.name "+
					" from ( "+
					" select count(DISTINCT a.id) as total,a.proposal_person as uid from dbo.tProposal as a "+
					" inner join dbo.tMainSuggestion as c on c.proposalID=a.id "+
					" where source='公司' "+
					" and year(lastModifyTime)="+year;
		if(m != null && !m.equals("")){
			int a = m*3;
			int b = a-1;
			int c = b-1;
			h += " and month(lastModifyTime) in ("+a+","+b+","+c+")";
		}
		h += " and state=0 "+
			" group by a.proposal_person ) as aac "+
			" inner join dbo.tEmpolyee as emp on aac.uid=emp.uid "+
			" inner join dbo.tDepartment as d on d.id=emp.departmentid";
		return h;
		
	}
	
	private String getSql_selectTeamWork(Integer year,Integer m){
		String h = "select emp.name,count(*) as al , sum(case when state=9 then 1 else 0 end) as [WAITCHANGE] ,"+
				 	" sum(case when state=6 then 1 else 0 end) as [DO_PROJECT] ,"+
					" sum(case when state=4 then 1 else 0 end) as [BEGIN_PROJECT] "+
					" from dbo.VAVE_TeamWork as tw"+
					" inner join tProposal as p on p.id=tw.proposalId"+
					" inner join dbo.tEmpolyee as emp on tw.projectManager=emp.uid "+
					" where year(lastModifyTime)="+year;
		if(m != null && !m.equals("")){
			int a = m*3;
			int b = a-1;
			int c = b-1;
			h += " and month(lastModifyTime) in ("+a+","+b+","+c+")";
		}
		h += " group by emp.name";
		return h;
	}
	
	private List<Pcount> doPersonalProposalCount(Integer year,Integer m) {
		
		//select [all],approval,finish,hlh,WAITCHANGE,DO_PROJECT,BEGIN_PROJECT,d.name as departName,e.name as empName 		
		String sql=getSql(year,m);  	
		String sql2=getSql2(year,m);  				
		String sql_selectTeamWork=getSql_selectTeamWork(year,m);		
		List<Pcount> list2=this.getJdbcTemplateImpl().doSelectSQLPersonal(sql2);
		List<Pcount> list=this.getJdbcTemplateImpl().doSelectSQLPersonal(sql);
		List<Pcount> selectTeamWorks=this.getJdbcTemplateImpl().selectTeamWorks(sql_selectTeamWork);
		List<Pcount> rs= this.sortPcount(list,list2);
		List<Pcount> Spplys=doSupplyCount( year,m);
		List<Pcount> rs2=this.sortPcount(rs,Spplys);
		List<Pcount> rs3 = this.sortPcount(rs2,selectTeamWorks);
		List<Pcount> projectSaving = this.getTeamWorkBiz().countTeamWorkSaving(year);
		List<Pcount> projectSaving2 = this.getTeamWorkBiz().countTeamWorkSaving2(year);
		List<Pcount> rs4 = this.sortPcount(rs3,projectSaving);
		return  this.sortPcount(rs4,projectSaving2);		
	}
	/**
	 * 供应商提案
	 * @param year
	 * @return
	 */
	private List<Pcount> doSupplyCount(Integer year,Integer m)
	{
		String sql="select sup.simpleName as empName,"+
					"sum(case when state>=0 then 1 else 0 end) as [all], "+
					"sum(case when state>3 then 1 else 0 end) as [approval], "+
					"sum(case when state=7 then 1 else 0 end) as [finish],sum(pd.total_saving) "+
				   	"from dbo.tProposal as p inner join dbo.VAVE_Supply as sup "+
					"on p.suppliers=sup.simpleName "+
					"left join (select * from vave_pointsDetails  where _year="+year+") pd on pd.uid=sup.simpleName " +
					"where p.source='供应商' "+
					" and year(lastModifyTime)="+year;
		if(m != null && !m.equals("")){
			int a = m*3;
			int b = a-1;
			int c = b-1;
			sql += " and month(lastModifyTime) in ("+a+","+b+","+c+")";
		}
		sql += " and state>0"+
			   " group by sup.simpleName";
		List<Pcount> list=this.getJdbcTemplateImpl().doSelectSpply(sql);
		return list;
	}
	
	private List<Count> sortCount(List<Count> items )
	{
		
		for(int j=0;j<items.size();j++)
		{
			for(int i=1;i<items.size()-j;i++)
			{
				Count elem1=items.get(i-1);
				Count elem2=items.get(i);
				if(elem1.getProposalNum()<elem2.getProposalNum())
				{
					Count elem=elem2;
					items.set(i, items.get(i-1));
					items.set(i-1, elem);			
				}
			}
		}
		return items;
	}
	//排序
	private List<Count> sortCount(List<Count> items ,List<Count> items2)
	{
		for(int j=0;j<items.size();j++)
		{
			for(int k=0;k<items2.size();k++)
			{
				if(items.get(j).getDepartmentName().endsWith(items2.get(k).getDepartmentName()))
				{
					items.get(j).setProposalNum(items.get(j).getProposalNum()+items2.get(k).getProposalNum());
					
				}
			}
		}
		for(int j=0;j<items.size();j++)
		{
			for(int i=1;i<items.size()-j;i++)
			{
				
				Count elem1=items.get(i-1);
				Count elem2=items.get(i);
				if(elem1.getProposalNum()<elem2.getProposalNum())
				{
					Count elem=elem2;
					items.set(i, items.get(i-1));
					items.set(i-1, elem);			
				}
			}
		}
		return items;
	}
	/**
	 * 两个list想加
	 * @param items
	 * @param items2
	 * @return
	 */
	private List<Pcount> sortPcount(List<Pcount> items,List<Pcount> items2 )
	{
		for(int j=0;j<items.size();j++)
		{
			for(int k=0;k<items2.size();k++)
			{
				if(items.get(j).getUname().equals(items2.get(k).getUname()))
				{
					items.get(j).setProposalNum(items.get(j).getProposalNum()+items2.get(k).getProposalNum());
					items.get(j).setAllProjects(items.get(j).getAllProjects()+items2.get(k).getAllProjects());
					items.get(j).setDO_PROJECT(items.get(j).getDO_PROJECT()+items2.get(k).getDO_PROJECT());
					items.get(j).setBEGIN_PROJECT(items.get(j).getBEGIN_PROJECT()+items2.get(k).getBEGIN_PROJECT());
					items.get(j).setWAITCHANGE(items.get(j).getWAITCHANGE()+items2.get(k).getWAITCHANGE());
					items.get(j).setCuresyearSaving(items.get(j).getCuresyearSaving()+items2.get(k).getCuresyearSaving());
					items.get(j).setEsyearSaving(items.get(j).getEsyearSaving()+items2.get(k).getEsyearSaving());
					items.get(j).setCuryearSaving(items.get(j).getCuryearSaving()+items2.get(k).getCuryearSaving());
					items.get(j).setYearSaving(items.get(j).getYearSaving()+items2.get(k).getYearSaving());
					items2.remove(k);
				}
			}
		}
		if(items2!=null&&!items2.isEmpty())
		{
			items.addAll(items2);
		}
		return items;
	}
	
	/**
	 * 参与率
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward rateAcount(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		String year = request.getParameter("year");
		if(year == null || year.equals("")){
			
			year = Calendar.getInstance().get(Calendar.YEAR)+"";
		}
		this.getProposalBiz().doApprovedPreRate(year);
		String sql=getSql(Integer.parseInt(year),null);  	
		String sql2=getSql2(Integer.parseInt(year),null); 
		List<Pcount> list2=this.getJdbcTemplateImpl().doSelectSQLPersonal(sql2);
		List<Pcount> list=this.getJdbcTemplateImpl().doSelectSQLPersonal(sql);
		List<Pcount> pcountRS= this.sortPcount(list,list2);
		
		List<Object[]> rs = this.getProposalBiz().doParticipationRate(year);//参与率
		//List<Object[]> approvedPreRate = this.getProposalBiz().doApprovedPreRate(year);
		int totalNums = 0,a=0,b=0;
		for(Object[] item :rs){
			a=0;b=0;
			for(Pcount pItem:pcountRS){			
				if(item[3].equals(pItem.getDepartmentName())){
					 a += pItem.getProposalNum();
					 b += pItem.getDoNum();
				}
			}
			item[6]=b ;item[5]=a;
			totalNums+=(Integer)item[0];
			float temp=0f;
			item[2]=((Integer)item[0]+temp)/(Integer)item[1];
//			for(Object[] aa:approvedPreRate){
//				if(item[4].equals(aa[2])){
//					item[5]=aa[0];
//					item[6]=aa[1];
//				}
//			}			
		}
		request.setAttribute("participationRate", rs);		
		return mapping.findForward("rate");
	}
	
	/**
	 * 绩效统计
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward approveRateAcount(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		//String year = request.getParameter("year");
		List<ApproveRateItem> rs = this.getApproveRateManager().appraveRate();	
		
		List<TuserRole> rs1 = this.getRoleManager().doSelectByRoleName("vaveDepartEmp");
		List<TuserRole> rs2 = this.getRoleManager().doSelectByRoleName("vavePM");
		//rs2.addAll(rs1);
		this.getApproveRateManager().merge2(rs,rs1,rs2);
		request.setAttribute("rs", rs);
		return mapping.findForward("approveRate");
	}
	
//	/**
//	 * 统计没人节约金额
//	 * @param 年份
//	 */
//	private void accountTotalSaving(String year){
//		
//		StringBuffer sql=new StringBuffer("select collection_persion,sum(cast(expectSaving as numeric(39))) from tproposal as p inner join"); 
//		sql.append("(select a.proposalId,expectSaving from vave_proposalmore a right join");
//		(select proposalId,max(version) as version from vave_proposalmore group by proposalId )b
//		on a.proposalId=b.proposalId and a.version=b.version) as v on p.id=v.proposalId
//		--inner join tproposal as p on p.id=a.proposalId
//		where state>=4 --and collection_persion<>1 and collection_persion<> 1096
//		group by p.collection_persion
//	}
}