/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package app.web.struts.action;

import java.io.IOException;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;
import net.sf.json.JsonConfig;

import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import common.entity.MyMail;
import common.util.ConfigureReader;
import common.util.DownLoad;
import common.util.MyUtil;

import app.common.PostDailyRecodeExcel;
import app.common.VaveAccountExcel;
import app.common.VaveProposalAccountExcel;
import app.entity.Tdepartment;
import app.entity.Tempolyee;
import app.entity.TmainSuggestion;
import app.entity.TotherSuggestion;
import app.entity.Tproposal;
import app.entity.Tuser;
import app.entity.vave.Schedule;
import app.entity.vave.VaveProposalMore;
import app.entity.vave.VaveTeamWork;
import app.entity.vave.VaveTeamWorkProject;
import app.web.struts.form.TaskForm;

/** 
 * MyEclipse Struts
 * Creation date: 03-19-2009
 * 
 * XDoclet definition:
 * @struts.action path="/task" name="taskForm" input="/form/task.jsp" parameter="actionType" scope="request" validate="true"
 */
public class TaskAction extends BaseAction {
	/*
	 * Generated Methods
	 */

	/** 
	 * 查看我的任务
	 */
	public ActionForward doSelectMyTask(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		TaskForm taskForm = (TaskForm) form;// TODO Auto-generated method stub
		VaveTeamWorkProject item=taskForm.getTeamWorkProject();
		VaveTeamWork teamwork=taskForm.getTeamWork();
		item.setVaveTeamWork(teamwork);
		Tuser user=(Tuser)request.getSession().getAttribute("logineduser");
		if(user.getEmp().getRoleids_b().contains("vaveCompany")||user.getEmp().getRoleids_b().contains("vaveCompanyManager"))
		{
			
		}
		else if(user.getEmp().getRoleids_b().contains("vaveDepartEmp")||user.getEmp().getRoleids_b().contains("vavePM"))
		{
			Tdepartment depart= user.getEmp().getTdepartment();
			Tempolyee emp=new Tempolyee();
			emp.setTdepartment(depart);
			item.setResponsiblePerson(emp);
		}
		else  {
			item.setResponsiblePerson(user.getEmp());
		}
		List<VaveTeamWorkProject> list=this.getTeamWorkProjectBiz().doSelectByCond(item);
		request.setAttribute("taskList", list);
		return mapping.findForward("MyTasksList");
	}
	
	/**
	 * 查询所有项目
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward doSelectProjectList(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		TaskForm taskForm = (TaskForm) form;
		VaveTeamWork item=taskForm.getTeamWork();
		List<VaveTeamWork> teamWorks=this.getTeamWorkBiz().doSelectByCond(item);
		request.setAttribute("rs", teamWorks);
		return mapping.findForward("projectList");
	}	
	
	/**
	 * 查看我负责的项目列表
	 */
	public ActionForward doSelectMyTeamTask(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		TaskForm taskForm = (TaskForm) form;// TODO Auto-generated method stub
		String departName=request.getParameter("departmentName");
		String projectManager=request.getParameter("projectManagerName");
		String teamName=request.getParameter("teamName");
		VaveTeamWork item=taskForm.getTeamWork();
		Tuser user=(Tuser)request.getSession().getAttribute("logineduser");
		//如果不是公司审批权限
		
		if(departName!=null&&!departName.equals(""))
		{
			item.getProjectManager().getTdepartment().setName(departName);
		}
		if(teamName!=null&&!teamName.equals(""))
		{
			item.setTeamName(teamName);
		}
		if(projectManager!=null&&!projectManager.equals(""))
		{
			item.getProjectManager().setName(projectManager);
		}
		if(user.getEmp().getRoleids_b().contains("vaveDepartEmp")){
			item.getProjectManager().setTdepartment(user.getEmp().getTdepartment());
		}
		List<VaveTeamWork> teamWorks=this.getTeamWorkBiz().doSelectByCond(item);
		List<VaveTeamWork> rsList=new ArrayList<VaveTeamWork>();
		if(!user.getEmp().getRoleids_b().contains("vaveCompany")&&!user.getEmp().getRoleids_b().contains("vaveDepartEmp"))
		{
			//登陆者的uid
			String uid=user.getUid();
			for(VaveTeamWork elem: teamWorks)
			{
				//如果是被允许的
				if(elem.getAllowUid(uid))
				{
					rsList.add(elem);
				}
			}
		}else{
			rsList=teamWorks;
		}
		JSONArray ja=JSONArray.fromObject(rsList);
		PrintWriter out;
		try {
			response.setCharacterEncoding("utf-8");
			out = response.getWriter();
			out.print(ja.toString()); 
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		

		return null;
	}
	
	/**
	 * 添加任务 财务确认
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward doFinaceConfirm(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		String[] type={"财务确认"};
		String[] jobContents={"财务确认"};
		ConfigureReader cr=new ConfigureReader();
		String toSB=cr.getSDAACConf("FINANCE_CONFIRM_UID");
		String[] responsiblePersons={toSB};
		DateFormat df=new SimpleDateFormat("yyyy-MM-dd");
		String[] myTimes={df.format(Calendar.getInstance().getTime())};
//		String[] finishTime=request.getParameterValues("finishTiem");
//		Integer[] taskIDs=MyUtil.toTransFormInteger(request.getParameterValues("taskID"));
		Integer workTeamID=Integer.parseInt(request.getParameter("workTeamID"));
		//String proposalId=request.getParameter("proposalId");
		String[] remarks={""};		
		//添加新任务
		if(jobContents!=null)
		{
			for(int i=0;i<jobContents.length;i++)
			{
				VaveTeamWorkProject project=new VaveTeamWorkProject();
				project.setState(VaveTeamWorkProject.JOB_PUBLISH);
				project.setType(type[i]);
				project.setJobContent(jobContents[i]);
				project.setResponsiblePerson(new Tempolyee(responsiblePersons[i]));
				project.setMyTime(myTimes[i]);
				project.setRemark(remarks[i]);
				VaveTeamWork teamWork= new VaveTeamWork();
				teamWork.setWorkTeamId(workTeamID);
				project.setVaveTeamWork(teamWork);
				this.getTeamWorkProjectBiz().doInsert(project);
				List<VaveTeamWork> vaveTeamWork= this.getTeamWorkBiz().doSelectByCond(teamWork);
				String mailContext="项目名称:"+vaveTeamWork.get(0).getTeamName();
				//添加mail列表
				MyMail mail=new MyMail(responsiblePersons[i],"vave新任务",jobContents[i]+mailContext,0);				
				this.getMailManager().addMailList(mail);
			}	
		}
		String json="{success : true}"  ; 
		try {
			response.getWriter().write(json);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} 
		 return null;
	}
	
	/**
	 * 添加任务
	 */
	public ActionForward doInsertMyTeamTask(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		String[] type=request.getParameterValues("type");
		String[] jobContents=request.getParameterValues("jobContent");
		String[] responsiblePersons=request.getParameterValues("responsiblePerson");
		String[] myTimes=request.getParameterValues("myTime");
		String[] finishTime=request.getParameterValues("finishTiem");
		Integer[] taskIDs=MyUtil.toTransFormInteger(request.getParameterValues("taskID"));
		Integer workTeamID=Integer.parseInt(request.getParameter("workTeamID"));
		String proposalId=request.getParameter("proposalId");
		String[] remarks=request.getParameterValues("remarks");		
		//添加新任务
		if(jobContents!=null)
		{
			for(int i=0;i<jobContents.length;i++)
			{
				VaveTeamWorkProject project=new VaveTeamWorkProject();
				project.setState(VaveTeamWorkProject.JOB_PUBLISH);
				project.setType(type[i]);
				project.setJobContent(jobContents[i]);
				project.setResponsiblePerson(new Tempolyee(responsiblePersons[i]));
				project.setMyTime(myTimes[i]);
				project.setRemark(remarks[i]);
				VaveTeamWork teamWork= new VaveTeamWork();
				teamWork.setWorkTeamId(workTeamID);
				project.setVaveTeamWork(teamWork);
				this.getTeamWorkProjectBiz().doInsert(project);
				//添加mail列表
				List<VaveTeamWork> vaveTeamWork= this.getTeamWorkBiz().doSelectByCond(teamWork);
				String mailContext="项目名称:"+vaveTeamWork.get(0).getTeamName()+"工作内容:";
				MyMail mail=new MyMail(responsiblePersons[i],"vave新任务",mailContext+jobContents[i],0);				
				this.getMailManager().addMailList(mail);
			}	
		}
		//更新完成日期和备注
		List<VaveTeamWorkProject> teamWorkProject=new ArrayList<VaveTeamWorkProject>();
		if(taskIDs!=null)
		{
			for(int i=0;i<taskIDs.length;i++)
			{
				
					VaveTeamWorkProject item=new VaveTeamWorkProject();
					item.setId(taskIDs[i]);
					item.setMyFinishTime(finishTime[i]);
					item.setRemark(remarks[i]);
					teamWorkProject.add(item);
					this.getTeamWorkProjectBiz().doUpdateFinishTime(teamWorkProject);
			}
		}
		
		 String path=mapping.findForward("selectMyTeamTaskDetails").getPath()+"&proposalID="+proposalId;
		 ActionForward af=new ActionForward(path);
		 return af;
	}
	/**
	 * 删除任务
	 */
	public ActionForward doDeleteMyTeamTask(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		Integer id=Integer.parseInt(request.getParameter("teamWorkprojectID"));
		this.getTeamWorkProjectBiz().doDelete(id);
		return mapping.findForward("");
	}
	/**
	 * 管理我的项目
	 */
	public ActionForward ManangerProject(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		TaskForm taskForm = (TaskForm) form;
		VaveTeamWork item= taskForm.getTeamWork();
		this.getTeamWorkBiz().updateProjectInfo(item);
		return null;
	}
	
	/**
	 * 管理我的任务
	 */
	public ActionForward ManangerJob(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		TaskForm taskForm = (TaskForm) form;
		VaveTeamWorkProject item=taskForm.getTeamWorkProject();
		this.getTeamWorkProjectBiz().updateJob(item);
		return mapping.findForward("selectMyTask");
	}
	/**
	 * 管理我的成员
	 */
	public ActionForward ManangerProjectMembers(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		Integer projectId=Integer.parseInt(request.getParameter("projectId"));
		String[] membersUid=request.getParameterValues("membersUid");
		VaveTeamWork item=new VaveTeamWork();
		item.setWorkTeamId(projectId);
		String meneberUid2="";//团队成员集合
		String membersNames="";//团队成员姓名集合
		if(membersUid!=null)
		{
			for(int i=0;i<membersUid.length;i++)
			{
				membersNames+=this.getEmpBiz().doSelectById(membersUid[i])+",";
				meneberUid2+=membersUid[i]+",";			
			}
			item.setMeneberUid(meneberUid2);
			item.setMeneberName(membersNames);
			this.getTeamWorkBiz().doManagerMenber(item);
		}
		return mapping.findForward("AddMembers");
	}
	/**
	 * 更变项目负责人
	 */
	public ActionForward ChangeProjectManager(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {

		TaskForm taskForm = (TaskForm) form;
		VaveTeamWork item=taskForm.getTeamWork();
		this.getTeamWorkBiz().updateProjectManager(item);	
		return mapping.findForward("ChangManager");
	}
	
	/**
	 * 	统计vave项目统计
	 * @throws UnsupportedEncodingException 
	 */
	public ActionForward projectAccount(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws UnsupportedEncodingException {
		Integer state=Integer.parseInt(request.getParameter("state"));//vave提案状态
	//	String source=request.getParameter("source"); //vave提案来源
		//String source = new String(request.getParameter("source")
		//		.getBytes("ISO-8859-1"), "UTF-8");
		String beginTime = request.getParameter("beginTime");
		String endTime = request.getParameter("endTime");
		Integer[] contexts=MyUtil.toTransFormInteger(request.getParameterValues("context"));
		VaveTeamWork item=new VaveTeamWork();
		item.getTproposal().setState(state);
		//item.getTproposal().setSource(source);
		item.a=beginTime;
		item.b=endTime;
		List<VaveTeamWork> rs=this.getTeamWorkBiz().count(item);//得到统计结果
		//下载
		SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd-HH-mm");
		String now=sdf.format(new Date());
		String fileName=request.getRealPath("/")+"excelDown\\VaveAccountExcel_"+now+".xls";	
		
		try {
			VaveAccountExcel vaveA=new VaveAccountExcel(fileName,contexts);
			vaveA.write(rs);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		DownLoad dl=new DownLoad();
		dl.dLoad(request, response, fileName);	
		return null;
	}
	
	/**
	 * 	统计vave项目统计
	 * @throws UnsupportedEncodingException 
	 */
	public ActionForward proposalAccount(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws UnsupportedEncodingException {
		String beginTime=request.getParameter("beginTime");
		String endTime=request.getParameter("endTime");
		Tproposal item = new Tproposal();
		SimpleDateFormat   sdf   =   new   SimpleDateFormat("yyyy-MM-dd");   
		try {
			item.setLastModifyTime( sdf.parse(beginTime));
			item.set_selectBeginTime( sdf.parse(endTime));
		} catch (ParseException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}

		List<Tproposal> rs= this.getProposalBiz().doSelect(item);
		List<Tproposal> rs2=new ArrayList<Tproposal>();
		for(Tproposal proposal:rs){

			//查询提案单附加
			List<Schedule> schedule=this.doSelectSchedule(proposal.getId());
			VaveProposalMore proposalMore=this.doSelectProposalMore(proposal.getId());
			proposal.schedules=schedule;
			proposal.proposalMore2=proposalMore;
			proposal.vtw = this.getTeamWorkBiz().doSelectByPorposalID(proposal.getId());	
			if(proposal.getState()==2){
				proposal.lastApproveDate = this.getMainSugBiz().doSelectByProposalID(proposal.getId()).getSuggestionDate()+"";
			}
			if(proposal.getState()==3){
				List<TotherSuggestion> temp = this.getOtherSugBiz().doSelectByproposalID(proposal.getId());
				proposal.lastApproveDate = temp.get(temp.size()-1).getSuggestionDate()+"";
			}
			if(proposal.getState()==4){		
				if(this.getCompanySugBiz().doSelectByproposalID(proposal.getId())!=null){
					proposal.lastApproveDate = this.getCompanySugBiz().doSelectByproposalID(proposal.getId()).getSuggestionDate()+"";
				}
				
			}
			if(proposal.getState()==8){						
				proposal.lastApproveDate = this.getMainSugBiz().doSelectByProposalID(proposal.getId()).getSuggestionDate()+"";				
			}
			if(proposal.getState()==0 ){ //个人状态去除草稿
				TmainSuggestion temp = this.getMainSugBiz().doSelectByProposalID(proposal.getId());
				if(temp !=null) {
					List<TotherSuggestion> xx = this.getOtherSugBiz().doSelectByproposalID(proposal.getId());
					if(this.getCompanySugBiz().doSelectByproposalID(proposal.getId())!=null){
						proposal.lastApproveDate = this.getCompanySugBiz().doSelectByproposalID(proposal.getId()).getSuggestionDate()+"";
					}else if(xx!=null){						
						proposal.lastApproveDate = xx.get(xx.size()-1).getSuggestionDate()+"";
					}else{
						proposal.lastApproveDate = temp.getSuggestionDate()+"";
					}
					rs2.add(proposal);
				}
			}else {
				rs2.add(proposal);
			}
			
		}
		//下载
		SimpleDateFormat sdf2=new SimpleDateFormat("yyyy-MM-dd-HH-mm");
		String now=sdf.format(new Date());
		String fileName=request.getRealPath("/")+"excelDown\\VaveAccountExcel_"+now+".xls";	
		
		try {
			VaveProposalAccountExcel vaveA=new VaveProposalAccountExcel(fileName);
			vaveA.write(rs2);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		DownLoad dl=new DownLoad();
		dl.dLoad(request, response, fileName);	
		return null;
	}
	
}