/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package app.web.struts.action;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.OutputStream;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;

import java.util.Calendar;
import java.util.List;
import java.util.Map;
import java.util.Set;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import test.DBLog4j;

import common.util.CopyOfExcelReader;
import common.util.MyUtil;
import common.util.Page;

import app.common.CountPostSalary;
import app.common.PostSalaryExcel;
import app.common.PpSalaryExcel;
import app.entity.IP;
import app.entity.IpTmp;
import app.entity.Logs;
import app.entity.TemployeeProduct;
import app.entity.Tempolyee;
import app.entity.Tproposal;
import app.entity.Tuser;

import app.entity.Test;

import app.web.struts.form.PersonalForm;

/**
 * MyEclipse Struts Creation date: 12-22-2008
 * 
 * XDoclet definition:
 * 
 * @struts.action path="/personal" name="personalForm"
 *                input="/form/personal.jsp" parameter="actionType"
 *                scope="request" validate="true"
 */
public class PersonalAction extends BaseAction {
	/*
	 * Generated Methods
	 */

	/**
	 * 日产量记录插入
	 */
	public ActionForward doInsert(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {

		PersonalForm item = (PersonalForm) form;
		String[] menebersUid = request.getParameter("menebersUid").split(",");
		String type = request.getParameter("type");
		List<TemployeeProduct> list = item.getItems();
		String masterid = item.getMasterid();// 得到组长id
		Date date = null;
		Tuser user = (Tuser) request.getSession().getAttribute("logineduser");
		if (item.getTime() != "" && item.getTime() != null) {
			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
			try {
				date = sdf.parse(item.getTime());
			} catch (ParseException e) {
				// TODO �Զ���ￄ1�7 catch ��
				e.printStackTrace();
			}
		} else {
			date = new Date();
		}
		int leixing = 1;// 岗位工资
		if (type != null && !type.equals("")) {
			leixing = Integer.parseInt(type);// 奖金
		}
		List<TemployeeProduct> rs = new ArrayList<TemployeeProduct>();
		for (TemployeeProduct product : list) {
			if(product.getTpost().getId()!=null){
				product.setDatatime(date);
				product.setTeamLeaderId(masterid);
				product.setRegisterID(user.getUid());
				product.setRegisterTime(new Date());
				product.setType(leixing);
				product.setFigureId(product.getTpost().getId().split("_")[0]);// 得到图号
				product.setGroupId(Calendar.getInstance().getTimeInMillis()+"");
				rs.add(product);
			}
		}
		if (menebersUid != null&&!menebersUid[0].equals("")) {
			for (String meneberUid : menebersUid) {
				TemployeeProduct product =new TemployeeProduct(); 
				product.setTpost(list.get(0).getTpost());
				product.setWorktime(list.get(0).getWorktime());
				product.setOutput(list.get(0).getOutput());
				product.setDatatime(date);
				product.setTeamLeaderId(masterid);
				product.setRegisterID(user.getUid());
				product.setRegisterTime(new Date());
				product.setType(leixing);
				product.setFigureId(product.getTpost().getId().split("_")[0]);// 得到图号
				product.setTempolyee(new Tempolyee(meneberUid));
				rs.add(product);
			}
		}
	      //	在保存的action里写
	        if(!this.isTokenValid(request))   {
	           log.debug("重复提交！！！！！！！！！！！");
//	           System.out.println("重复提交！！！！！！！！！！！");
	           this.saveToken(request);
	        }
	        else   {
	        	this.getPpBiz().FlushInsert(rs);
	        }		
		if (leixing == 1) {
			//		在进入保存页面的action里写        
//	 	    this.saveToken(request);
			return mapping.findForward("insertByForm");
		} else if (leixing == 2 || leixing == 3) {
			return mapping.findForward("PostBounce");
		} else {
			return null;
		}

	}
	
	public ActionForward doGotoInsertByForm(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		 	this.saveToken(request);
			return mapping.findForward("insertByForm");
	}
	
	public ActionForward doInsertByExcel(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		String fileNamePath = request.getParameter("fileNamePath");
		try {
			CopyOfExcelReader excelReader = new CopyOfExcelReader(fileNamePath);
			List<TemployeeProduct> list = excelReader.getList();
			this.getPpBiz().FlushInsert(list);
		} catch (IOException e) {
			// TODO 自动生成 catch 块
			e.printStackTrace();
		} catch (Exception e) {
			// TODO 自动生成 catch 块
			e.printStackTrace();
		}
		return mapping.findForward("excel");
	}

	/*
	 * 计算岗位工资
	 */
	public ActionForward selectAll(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		PersonalForm item = (PersonalForm) form;
		Integer pageIndex = 1;
		String myDate;
		String endTime;
		String uid = "";
		TemployeeProduct tpp = item.getItem();
		if (request.getParameter("page") != null) {
			pageIndex = Integer.parseInt(request.getParameter("page"));
			String[] times = (String[]) request.getSession().getAttribute(
					"condition");
			myDate = times[0];
			endTime = times[1];
			uid = (String) request.getSession().getAttribute("condition2");
		} else {
			myDate = item.getTime();
			endTime = item.getEndTime();
			if (tpp.getTempolyee() != null) {
				uid = tpp.getTempolyee().getUid();
			}
		}
		Page page = new Page(pageIndex);
		List<Test> list = this.getPpBiz().selectAll(myDate, endTime, uid, page);
		request.getSession().setAttribute("condition",
				new String[] { myDate, endTime });
		request.getSession().setAttribute("condition2", uid);
		request.setAttribute("page", page);
		this.getEmpBiz().addInformToUser(list);
		CountPostSalary.count(list, request);
		request.setAttribute("PostSalaryResults", list);
		return mapping.findForward("PostSalary");
	}

	/*
	 * 将查询结果导入excel并下载
	 */

	public ActionForward WriteToExcelAndDownLoad(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		String fileName;
		String myDate;
		String endTime;
		String uid = "";
		String[] times = (String[]) request.getSession().getAttribute(
				"condition");
		// myDate=(String) request.getSession().getAttribute("condition");
		myDate = times[0];
		endTime = times[1];

		uid = (String) request.getSession().getAttribute("condition2");

		List<Test> list = this.getPpBiz().selectAll(myDate, endTime, uid, null);
		this.getEmpBiz().addInformToUser(list);
		CountPostSalary.count(list, request);
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd-HH-mm-ss-SSSZ");
		String now = sdf.format(new Date());
		fileName = request.getRealPath("/") + "excelDown\\postSalary_DATE_"
				+ now + ".xls";
		try {

			PostSalaryExcel excelWriter = new PostSalaryExcel(fileName);
			// String[]dates=(String[]) list.toArray(new String[0]);
			excelWriter.write(list, "sheet1");
		} catch (Exception e) {
			// TODO 自动生成 catch 块
			e.printStackTrace();
		}
		response.setContentType("application/x-msdonload");
		File file = new File(fileName);
		int fileSize = (int) file.length();
		String str = "attachment;filename=" + file.getName();
		response.setHeader("Content-Disposition", str);
		response.setContentLength(fileSize);
		System.out.println(fileSize);
		System.out.println(file.getName());
		try {
			OutputStream os = response.getOutputStream();
			FileInputStream fis = new FileInputStream(file);
			BufferedInputStream bis = new BufferedInputStream(fis);
			BufferedOutputStream bos = new BufferedOutputStream(os);

			int r = 0;
			byte[] ba = new byte[4096];
			while ((r = bis.read(ba)) != -1) {
				bos.write(ba, 0, r);
				bos.flush();
			}
			bos.close();
			bis.close();
			fis.close();
		} catch (Exception e) {
			log.debug("OutputStream exception");
		}

		return null;
	}

	/**
	 * 奖金的结果写入excel和下载
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward WriteToExcelAndDownLoadPP(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {

		PersonalForm personalForm = (PersonalForm) form;
		String myDate = personalForm.getTime();
		TemployeeProduct tpp = personalForm.getItem();
		String uid = "";
		if (tpp.getTempolyee() != null) {
			uid = tpp.getTempolyee().getUid();
		}
		List<IpTmp> list = this.getIpTmpBiz().doSelectAll(myDate, uid, null);
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd-HH-mm-ss-SSSZ");
		String now = sdf.format(new Date());
		String fileName = request.getRealPath("/")
				+ "excelDown\\PpSalary_DATE_" + now + ".xls";

		PpSalaryExcel excelWriter;
		try {
			excelWriter = new PpSalaryExcel(fileName);
			excelWriter.write(list, "sheet1");
		} catch (Exception e) {
			// TODO 自动生成 catch 块
			e.printStackTrace();
		}
		response.setContentType("application/x-msdonload");
		File file = new File(fileName);
		int fileSize = (int) file.length();
		String str = "attachment;filename=" + file.getName();
		response.setHeader("Content-Disposition", str);
		response.setContentLength(fileSize);
		System.out.println(fileSize);
		System.out.println(file.getName());
		try {
			OutputStream os = response.getOutputStream();
			FileInputStream fis = new FileInputStream(file);
			BufferedInputStream bis = new BufferedInputStream(fis);
			BufferedOutputStream bos = new BufferedOutputStream(os);

			int r = 0;
			byte[] ba = new byte[4096];
			while ((r = bis.read(ba)) != -1) {
				bos.write(ba, 0, r);
				bos.flush();
			}
			bos.close();
			bis.close();
			fis.close();
		} catch (Exception e) {
			log.debug("OutputStream exception");
		}
		return null;

	}

	public ActionForward storeIPSalary(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		PersonalForm item = (PersonalForm) form;
		String myDate = item.getTime();
		Map<String, List<IP>> map = this.getPpBiz().insertIP(myDate);
		Set<String> set = map.keySet();
		List<IpTmp> list = new ArrayList<IpTmp>();
		for (String element : set) {
			IpTmp items = new IpTmp();
			items.setDate(new Date());
			items.setUid(element);
			List<IP> el = map.get(element);
			float result = 0.00f;
			for (IP object : el) {
				result += object.getPtworktime() * object.getPtcount()
						/ object.getSumt() / object.getTarget();
			}
			items.setIp(result);
			list.add(items);
		}
		this.getIpTmpBiz().doFlushInsert(list);
		return mapping.findForward("success");
	}

	public ActionForward getIPSalary(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {

		PersonalForm personalForm = (PersonalForm) form;
		String myDate = personalForm.getTime();
		TemployeeProduct tpp = personalForm.getItem();
		String uid = "";
		if (tpp.getTempolyee() != null) {
			uid = tpp.getTempolyee().getUid();
		}

		/**
		 * setting parameters of the paging
		 */
		Integer pageIndex = 1;
		if (request.getParameter("page") != null)
			pageIndex = Integer.parseInt(request.getParameter("page"));
		Page page = new Page(pageIndex);

		List<IpTmp> list = this.getIpTmpBiz().doSelectAll(myDate, uid, page);// get
																				// the
																				// BIZ
																				// function,and
																				// do
																				// it
		request.setAttribute("IPSalary", list);// insert the scope
		request.setAttribute("page", page);
		return mapping.findForward("IPSalary");
	}

	/**
	 * 更新每日产量记录
	 */
	public ActionForward updatePersonalDailyForm(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		PersonalForm item = (PersonalForm) form;
		Date date = null;
		if (null != request.getParameter("datatime")) {
			String time = request.getParameter("datatime");
			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
			try {
				date = sdf.parse(time);
			} catch (ParseException e) {
				// TODO �Զ���ￄ1�7 catch ��
				e.printStackTrace();
			}
		}
		TemployeeProduct empProduct = item.getItem();
		Tuser user = (Tuser) request.getSession().getAttribute("logineduser");
		empProduct.setRegisterID(user.getUid());
		empProduct.setDatatime(date);
		this.getPpBiz().doUpdate(empProduct);
		String context = "修改数据为：" + "员工：" + empProduct.getTempolyee().getUid()
				+ "岗位：" + empProduct.getTpost().getId() + "产出:"
				+ empProduct.getOutput() + "时间：" + empProduct.getWorktime()
				+ "组长:" + empProduct.getTeamLeaderId();
		// DBLog4j log=new DBLog4j(request.getRealPath("/"));
		// log.send_database(context);
		Logs logInfo = new Logs(user.getEmp().getName(), new Date(), context);
		this.getLogBiz().doInsert(logInfo);
		return mapping.findForward("personalEffectselect");
	}

	/**
	 * show every type worktime
	 */
	public ActionForward showTypeTime(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		String time = request.getParameter("time");
		List<Object[]> resluts = this.getPpBiz().selectEachTypeTime(time);
		request.setAttribute("accountType", resluts);
		return mapping.findForward("AccountTypeTime");
	}

}