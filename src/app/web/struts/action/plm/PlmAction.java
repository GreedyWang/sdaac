/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package app.web.struts.action.plm;

import java.awt.image.BufferedImage;
import java.io.IOException;
import java.io.PrintWriter;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import com.sun.image.codec.jpeg.JPEGCodec;
import com.sun.image.codec.jpeg.JPEGEncodeParam;
import com.sun.image.codec.jpeg.JPEGImageEncoder;
import common.util.DownLoad;
import common.util.Page;
import common.util.BarCode.BarCode;
import sdaac.wym.app.entity.plm.Bom;
import sdaac.wym.app.entity.plm.MyTree;
import sdaac.wym.app.entity.plm.Part;
import app.common.PlmExcel;
import app.web.struts.action.BaseAction;

/**
 * MyEclipse Struts Creation date: 08-03-2009
 * 
 * XDoclet definition:
 * 
 * @struts.action path="/plm" name="plmForm" parameter="actionType"
 *                scope="request" validate="true"
 */
public class PlmAction extends BaseAction {
	/*
	 * Generated Methods
	 */

	/**
	 * 查询
	 */
	public ActionForward select(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		// PlmForm plmForm = (PlmForm) form;// TODO Auto-generated method stub
		String condition = request.getParameter("condition");
		boolean isA = Boolean.parseBoolean(request.getParameter("isA"));
		String kind = request.getParameter("kind");// 查mpart 还是epart
		HttpSession se = request.getSession();
		// 分页
		Integer pageIndex = 1;
		if (request.getParameter("page") != null) {
			pageIndex = Integer.parseInt(request.getParameter("page"));
			String[] ddc = (String[]) se.getAttribute("cond");
			condition = ddc[0];
			kind = ddc[1];
		}
		Page page = new Page(pageIndex);
		if (kind.equals("M")) {
			List<Part> rs = this.getMPlmManager().selectPartByCond(condition,
					page, isA);
			request.setAttribute("MParts", rs);
		}
		if (kind.equals("E")) {
			List<Part> rs = this.getEPlmManager().selectPartByCond(condition,
					page, isA);
			request.setAttribute("MParts", rs);
		}

		se.setAttribute("cond", new String[] { condition, kind });
		request.setAttribute("page", page);
		return mapping.findForward("plm");
	}

	/**
	 * 显示条形码
	 */
	private static final long serialVersionUID = 713921548524071712L;
	public BarCode barcode;

	private BarCode getChart(HttpServletRequest httpservletrequest) {
		if (barcode == null)
			barcode = new BarCode();
		try {
			BarCode.setParameter("barType", httpservletrequest
					.getParameter("barType"), barcode);
			if (httpservletrequest.getParameter("width") != null
					&& httpservletrequest.getParameter("height") != null) {
				BarCode.setParameter("width", httpservletrequest
						.getParameter("width"), barcode);
				BarCode.setParameter("height", httpservletrequest
						.getParameter("height"), barcode);
				BarCode.setParameter("autoSize", "n", barcode);
			}
			BarCode.setParameter("code", httpservletrequest
					.getParameter("code"), barcode);
			BarCode.setParameter("st", httpservletrequest.getParameter("st"),
					barcode);
			BarCode.setParameter("textFont", httpservletrequest
					.getParameter("textFont"), barcode);
			BarCode.setParameter("fontColor", httpservletrequest
					.getParameter("fontColor"), barcode);
			BarCode.setParameter("barColor", httpservletrequest
					.getParameter("barColor"), barcode);
			BarCode.setParameter("backColor", httpservletrequest
					.getParameter("backColor"), barcode);
			BarCode.setParameter("rotate", httpservletrequest
					.getParameter("rotate"), barcode);
			BarCode.setParameter("barHeightCM", httpservletrequest
					.getParameter("barHeightCM"), barcode);
			BarCode.setParameter("x", httpservletrequest.getParameter("x"),
					barcode);
			BarCode.setParameter("n", httpservletrequest.getParameter("n"),
					barcode);
			BarCode.setParameter("leftMarginCM", httpservletrequest
					.getParameter("leftMarginCM"), barcode);
			BarCode.setParameter("topMarginCM", httpservletrequest
					.getParameter("topMarginCM"), barcode);
			BarCode.setParameter("checkCharacter", httpservletrequest
					.getParameter("checkCharacter"), barcode);
			BarCode.setParameter("checkCharacterInText", httpservletrequest
					.getParameter("checkCharacterInText"), barcode);
			BarCode.setParameter("Code128Set", httpservletrequest
					.getParameter("Code128Set"), barcode);
			BarCode.setParameter("UPCESytem", httpservletrequest
					.getParameter("UPCESytem"), barcode);
		} catch (Exception exception) {
			exception.printStackTrace();
			barcode.code = "Parameter Error";
		}
		return barcode;
	}

	/**
	 * 显示条形码
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws IOException
	 */
	public ActionForward showBarCode(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws IOException {
		response.setContentType("image/jpeg");
		javax.servlet.ServletOutputStream servletoutputstream = response
				.getOutputStream();
		response.setHeader("Pragma", "no-cache");
		response.setHeader("Cache-Control", "no-cache");
		response.setDateHeader("Expires", 0L);
		try {
			BarCode barcode1 = getChart(request);
			barcode1.setSize(barcode1.width, barcode1.height);
			if (barcode1.autoSize) {
				BufferedImage bufferedimage = new BufferedImage(barcode1
						.getSize().width, barcode1.getSize().height, 13);
				java.awt.Graphics2D graphics2d = bufferedimage.createGraphics();
				barcode1.paint(graphics2d);
				barcode1.invalidate();
				graphics2d.dispose();
			}
			BufferedImage bufferedimage1 = new BufferedImage(
					barcode1.getSize().width, barcode1.getSize().height, 1);
			java.awt.Graphics2D graphics2d1 = bufferedimage1.createGraphics();
			barcode1.paint(graphics2d1);
			JPEGImageEncoder jpegimageencoder = JPEGCodec
					.createJPEGEncoder(servletoutputstream);
			JPEGEncodeParam jpegencodeparam = jpegimageencoder
					.getDefaultJPEGEncodeParam(bufferedimage1);
			jpegencodeparam.setQuality(1.0F, true);
			jpegimageencoder.setJPEGEncodeParam(jpegencodeparam);
			jpegimageencoder.encode(bufferedimage1, jpegencodeparam);
		} catch (Exception exception) {
			exception.printStackTrace();
		}
		return null;
	}

	/**
	 * 显示单个零件详细信息
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */

	public ActionForward showDetail(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		String condition = request.getParameter("mpartId");
		String kind = condition.split(";")[1];// 查mpart 还是epa
		String pk = condition.split(";")[0];
	
		Part item;
		if (kind.equals("M")) {
			item = this.getMPlmManager().selectByPk(pk);
			item.setType(kind);
			request.setAttribute("detail", item);
		}
		if (kind.equals("E")) {
			item = this.getEPlmManager().selectByPk(pk);
			item.setType(kind);
			request.setAttribute("detail", item);
		}

		return mapping.findForward("showDetails");
	}

	private MyTree<Bom> selctByKind(String kind, String pk) {
		MyTree<Bom> myTree = new MyTree<Bom>();
		Bom bom = new Bom();
		if (kind.equals("M")) {
			this.getMPlmManager().selectSeries(pk, myTree);
			bom.setCpart(this.getMPlmManager().selectByPk(pk));
			myTree.setNode(bom);
		}
		if (kind.equals("E")) {
			this.getEPlmManager().selectSeries(pk, myTree);
			bom.setCpart(this.getEPlmManager().selectByPk(pk));
			myTree.setNode(bom);
		}
		return myTree;
	}

	// /**
	// * 反向BOM
	// * @param kind
	// * @param pk
	// * @return
	// */
	// private MyTree<Part> reSelctByKind(String kind,String pk)
	// {
	// MyTree<Part> mp2=new MyTree<Part>(kind);
	// MyTree<Bom> myTree=new MyTree<Bom>();
	//		
	// if(kind.equals("M"))
	// {
	// this.getPlmManager().reSelectSeries(pk,myTree);
	// this.getPlmManager().changetoMbom(myTree,mp2);
	// mp2.setNode(this.getPlmManager().selectByPk(pk));
	//			
	// }
	// if(kind.equals("E"))
	// {
	// this.getPlmManager().reSelectSeries2(pk,myTree);
	// this.getPlmManager().changetoMbom2(myTree,mp2);
	// mp2.setNode(this.getPlmManager().selectByPk2(pk));
	// }
	// return mp2;
	// }
	/**
	 * 导出excel
	 */
	public ActionForward plmToExcel(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		String pk = request.getParameter("pmartId");
		// 得到kind
		HttpSession se = request.getSession();
		String[] ddc = (String[]) se.getAttribute("cond");
		String kind = ddc[1];
		// 设置文件名
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd-HH-mm-ss-SSSZ");
		String now = sdf.format(new Date());
		String fileName = request.getRealPath("/") + "excelDown\\PLM_" + now
				+ ".xls";
		PlmExcel pe;
		MyTree<Bom> mp2 = selctByKind(kind, pk);
		try {
			pe = new PlmExcel(fileName);
			pe.writeToExcel(mp2);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		DownLoad dl = new DownLoad();
		dl.dLoad(request, response, fileName);
		return null;
	}

	/**
	 * 反向显示树
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return rs = this.getMPlmManager().selectPreLevelChildren(pk);
	 */
	public ActionForward reShowTree(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		response.setCharacterEncoding("UTF-8");
		String condition = request.getParameter("node");
		String kind = condition.split(";")[1];
		List<Bom> rs = null;
		if (condition != null && !condition.equals("")) {
			rs = getBoms(condition, "inverse");
			// ToJson.listToJsonArrart(rs, response);
			StringBuffer sb = new StringBuffer();
			sb.append("[");
			if (rs != null) {
				for (Bom bom : rs) {

					// TODO Auto-generated method stub

					sb.append("{id:'" + bom.getFpart().getId()+";"+kind+ "',text:'");
					sb.append(bom.getFpart().getNo() + "/");
					sb.append(bom.getFpart().getName() + "/");
					sb.append(bom.getBnum()+ "'},");

				}
				sb.substring(0, sb.length() - 1);
				sb.append("]");
				PrintWriter out;
				try {
					out = response.getWriter();
					System.out.println(sb.toString());
					out.print(sb.toString());
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
		}
		return null;
	}

	protected List<Bom> getBoms(String condition, String type) {
		
		String kind = condition.split(";")[1];
		String pk = condition.split(";")[0];
		if (type.equals("inverse")) {//如果是逆序
			if (kind.equals("M")) {
				return this.getMPlmManager().selectPreLevelChildren(pk);
			} else if (kind.equals("E")) {
				return this.getEPlmManager().selectPreLevelChildren(pk);
			} else {
				return null;
			}
		} else {
			if (kind.equals("M")) {
				return this.getMPlmManager().selectNextLevelChildren(pk);
			} else if (kind.equals("E")) {
				return this.getEPlmManager().selectNextLevelChildren(pk);
			} else {
				return null;
			}
		}
	}

	/**
	 * 显示树
	 */
	public ActionForward showTree(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		response.setCharacterEncoding("UTF-8");
		String condition = request.getParameter("node");	
		String kind = condition.split(";")[1];
		List<Bom> rs = null;
		if (condition != null && !condition.equals("")) {
			rs = getBoms(condition, "sequence");
			StringBuffer sb = new StringBuffer();
			sb.append("[");
			if (rs != null) {
				for (Bom bom : rs) {
					// TODO Auto-generated method stub
					sb.append("{id:'" + bom.getCpart().getId()+";"+kind + "',text:'");
					sb.append(bom.getCpart().getNo() + "/");
					sb.append(bom.getCpart().getName() + "/");
					sb.append(bom.getBnum()+ "'},");
				}
				sb.substring(0, sb.length() - 1);
				sb.append("]");
				PrintWriter out;
				try {
					out = response.getWriter();
				//	System.out.println(sb.toString());
					out.print(sb.toString());
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
		}
		return null;
	}
}