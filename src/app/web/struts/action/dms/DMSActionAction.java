/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package app.web.struts.action.dms;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.collections.map.LinkedMap;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import common.util.MyUtil;

import sdaac.wym.dms.Service.i.IAllService;
import sdaac.wym.dms.entity.Bonus;
import sdaac.wym.dms.entity.Indicate;
import sdaac.wym.dms.entity.Score;
import sdaac.wym.dms.entity.ScoreDetails;
import sdaac.wym.dms.entity.ScoreShow;
import sdaac.wym.dms.entity.Templete;
import sdaac.wym.dms.entity.Ver;

import app.entity.Tempolyee;
import app.entity.Tuser;

/**
 * MyEclipse Struts Creation date: 08-01-2012
 * 
 * XDoclet definition:
 * 
 * @struts.action path="/dMSAction" name="actionType" scope="request"
 *                validate="true"
 */
public class DMSActionAction extends DMSBaseAction {
	/*
	 * Generated Methods
	 */
	public ActionForward doShow(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		user = (Tuser) request.getSession().getAttribute("logineduser");
		List<Templete> templetes = getTempleteService().doShowByCond(
				user.getEmp().getDistrict(),
				Tempolyee.getNextLevel(user.getEmp().selectedGroup));
		List<Tempolyee> emps = this.getWorkerService().doGetUnderlings(
				user.getEmp());
		List<ScoreDetails> sd = this.getSocreDetailsService().doShowWithScore(
				null, null, templetes);// new ArrayList<ScoreDetails>();

		boolean flag = false;

		Map<String, List<ScoreDetails>> sdMap = new HashMap<String, List<ScoreDetails>>();
		for (Templete templete : templetes) {
			for (Tempolyee emp : emps) {
				for (ScoreDetails scoreDetail : sd) {

					if (scoreDetail.getUid().equals(emp.getUid())
							&& scoreDetail.getIndicate().getId().equals(
									templete.getIndicate().getId())) {
						//						
						flag = true;
						if (!sdMap.containsKey(emp.getName())) {
							List<ScoreDetails> rs = new ArrayList<ScoreDetails>();
							rs.add(scoreDetail);
							sdMap.put(emp.getName(), rs);
						} else {
							sdMap.get(emp.getName()).add(scoreDetail);
						}
					}
				}
				if (!flag) {
					ScoreDetails item = new ScoreDetails();
					item.setActual(0);
					item.setTarget(0);
					item.setXishu(0);
					item.setUid(emp.getUid());
					item.getIndicate().setId(templete.getIndicate().getId());
					if (!sdMap.containsKey(emp.getName())) {
						List<ScoreDetails> rs = new ArrayList<ScoreDetails>();
						rs.add(item);
						sdMap.put(emp.getName(), rs);
					} else {
						sdMap.get(emp.getName()).add(item);
					}
				}
				flag = false;
			}
		}

		request.setAttribute("rs", sdMap);
		request.setAttribute("emps", emps);
		request.setAttribute("templetes", templetes);
		request.setAttribute("version", new String[] { "2012-09" });
		ActionForward af = new ActionForward();
		af.setPath("/DMS/Output/show.jsp");
		return af;
	}

	// ------------base info------------------
	/**
	 * show Indicate
	 */
	public ActionForward doShowIndicate(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		// DMSForm actionType = (DMSForm) form;// TODO Auto-generated method
		// stub
		user = (Tuser) request.getSession().getAttribute("logineduser");
		Map<String, List<Indicate>> rs = this.getDMSManager().doShow(
				user.getEmp());
		int[] weights = new int[rs.keySet().size()];
		int[] ids = new int[rs.keySet().size()];
		int i = 0, j = 0;
		for (String typeName : rs.keySet()) {
			weights[i++] = rs.get(typeName).get(0).getWeight();
			ids[j++] = rs.get(typeName).get(0).getId();
		}
		request.setAttribute("ids", ids);
		request.setAttribute("weights", weights);
		request.setAttribute("rs", rs);
		return mapping.findForward("indicate");
	}

	// public ActionForward doReadyDefine(ActionMapping mapping, ActionForm
	// form,
	// HttpServletRequest request, HttpServletResponse response) {
	// DMSForm actionType = (DMSForm) form;// TODO Auto-generated method stub
	//
	// List<Indicate> indicates = this.getDMSManager().doShow();
	// List<String> districts = new ArrayList();
	// districts.add("PTC");
	// districts.add("HVAC");
	//
	// List<String> groups = new ArrayList();
	// groups.add("1");
	// groups.add("2");
	// groups.add("3");
	//
	// request.setAttribute("indicates", indicates);
	// request.setAttribute("districts", districts);
	// request.setAttribute("groups", groups);
	//
	// ActionForward af = new ActionForward();
	// af.setPath("/DMS/Input/define.jsp");
	// return af;
	// // return mapping.findForward("indicate");
	// }

	// /**
	// * 定义指标模板
	// *
	// * @param mapping
	// * @param form
	// * @param request
	// * @param response
	// * @return
	// */
	// public ActionForward doDefine(ActionMapping mapping, ActionForm form,
	// HttpServletRequest request, HttpServletResponse response) {
	// DMSForm actionType = (DMSForm) form;// TODO Auto-generated method stub
	//
	// String district = request.getParameter("district");
	// String group = request.getParameter("group");
	// String[] indicates = request.getParameterValues("");
	//
	// ActionForward af = new ActionForward();
	// af.setPath("/DMS/Input/define.jsp");
	// return af;
	// // return mapping.findForward("indicate");
	// }

	private Tuser user;

	// public ActionForward doScoreReady(ActionMapping mapping, ActionForm form,
	// HttpServletRequest request, HttpServletResponse response) {
	// user = (Tuser) request.getSession().getAttribute("logineduser");
	// List<Templete> templetes =
	// getTempleteService().doShowByCond(user.getEmp().getDistrict(),
	// Tempolyee.getNextLevel(user.getEmp().getGroup()) );
	// List<Tempolyee> emps =
	// this.getWorkerService().doGetUnderlings(user.getEmp());
	// List<ScoreDetails> sd = this.getSocreDetailsService().doShow(null, null,
	// templetes);//new ArrayList<ScoreDetails>();
	//
	// boolean flag = false;
	//
	// Map<String,List<ScoreDetails>> sdMap = new
	// HashMap<String,List<ScoreDetails>>();
	// for(Templete templete :templetes){
	// for(Tempolyee emp :emps){
	// for(ScoreDetails scoreDetail :sd){
	//					
	// if(scoreDetail.getUid().equals(emp.getUid()) &&
	// scoreDetail.getIndicate().getId().equals(templete.getIndicate().getId())){
	// flag = true;
	// if(!sdMap.containsKey(emp.getName())){
	// List<ScoreDetails> rs = new ArrayList<ScoreDetails>();
	// rs.add(scoreDetail);
	// sdMap.put(emp.getName(), rs);
	// }else{
	// sdMap.get(emp.getName()).add(scoreDetail);
	// }
	// }
	// }
	// if(!flag){
	// ScoreDetails item = new ScoreDetails();
	// item.setActual(0);
	// item.setTarget(0);
	// item.setXishu(0);
	// item.setUid(emp.getUid());
	// item.getIndicate().setId(templete.getIndicate().getId());
	// if(!sdMap.containsKey(emp.getName())){
	// List<ScoreDetails> rs = new ArrayList<ScoreDetails>();
	// rs.add(item);
	// sdMap.put(emp.getName(), rs);
	// }else{
	// sdMap.get(emp.getName()).add(item);
	// }
	// }
	// flag = false;
	// }
	// }
	//		
	//		
	// request.setAttribute("rs", sdMap);
	// request.setAttribute("emps", emps);
	// request.setAttribute("templetes", templetes);
	//		
	// ActionForward af = new ActionForward();
	// af.setPath("/DMS/Input/score.jsp");
	// return af;
	// }

	/**
	 * 打分
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward doScore(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		String[] uids = request.getParameterValues("uid");
		String[] groups = request.getParameterValues("group");
		Float[] dmsratios = MyUtil.toTransFormFloat(request
				.getParameterValues("dmsratio"));

		Integer[] indicateIds = MyUtil.toTransFormInteger(request
				.getParameterValues("indicateid"));
		Float[] ptargets = MyUtil.toTransFormFloatWithPencentage(request
				.getParameterValues("target"));
		Float[] xishus = MyUtil.toTransFormFloatWithPencentage(request
				.getParameterValues("xushu"));
		Float[] actuals = MyUtil.toTransFormFloatWithPencentage(request
				.getParameterValues("actual"));

		Float[] weights = MyUtil.toTransFormFloat(request
				.getParameterValues("weight"));
		Float[] calcMethods = MyUtil.toTransFormFloat(request
				.getParameterValues("calcMethod"));
		// 重新处理target信息
		Float[] targets = new Float[uids.length * actuals.length];
		int perTargetSize = ptargets.length;
		for (int i = 0; i < uids.length; i++) {
			for (int j = 0; j < ptargets.length; j++) {
				targets[perTargetSize * i + j] = ptargets[j];
			}
		}

		String version = request.getParameter("version");
		String district = request.getParameter("district");
		String group = request.getParameter("group");
		user = (Tuser) request.getSession().getAttribute("logineduser");

		getDMSManager().doSaveScore(uids, targets, xishus, actuals,
				indicateIds, weights, calcMethods, version, district, group,
				user.getEmp().getUid(), groups, dmsratios);
		//确认完成
		String flag = request.getParameter("isF");
		if(flag!=null && flag.equals("1")){
			return finish(mapping, form, request, response);
		}else{
			ActionForward af = new ActionForward();
			af.setPath("/dMS.do?actionType=doGetUserInfo");
			return af;
		}
	}

	// --------------Employee--------------------
	public ActionForward doGetMyTeam(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		user = (Tuser) request.getSession().getAttribute("logineduser");
		user.getEmp().selectedGroup = user.getEmp().getGroup().split(",")[0];
		List<Tempolyee> rs = getEmpBiz().doShowMyTeamAll(user.getEmp());
		request.setAttribute("rs", rs);
		request.setAttribute("flag", user.getEmp().selectedGroup);
		ActionForward af = new ActionForward();
		af.setPath("/DMS/emp/MyTeam.jsp");
		return af;
		// return mapping.findForward("indicate");
	}

	/**
	 * 得到用戶信息，顯示區域和 組別
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward doGetUserInfo(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		user = (Tuser) request.getSession().getAttribute("logineduser");
		String[] areas = user.getEmp().getDistrict().split(",");
		String[] groups = user.getEmp().getGroup().split(",");
		request.setAttribute("aaa", areas);
		request.setAttribute("groups", groups);
		String[] versions = this.getBonusBiz().getAllVersion();
		request.setAttribute("versions", versions);
		ActionForward af = new ActionForward();
		af.setPath("/DMS/firstStep.jsp");
		String d = request.getParameter("d"); // 得到目的 如果目的是顯示得分
		if (d != null && d.equals("4score")){
			request.setAttribute("uids", this.getEmpBiz().getSameAreaGroupNames(areas[0], groups[0]));
			af.setPath("/DMS/firstStep4score.jsp");
		}
		return af;
	}

	/**
	 * 开始打分 如果是新版本创建新版本 如果是已经记录调用记录
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward doScoreReady(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		String version = request.getParameter("version");
		Tempolyee emp = putInfo(request);
		List<ScoreShow> sss = getDMSManager().doReadyScoring(emp, version);
		Ver ver = new Ver(version,emp.getDistrict(),emp.getSelectedGroup(),emp.getUid());
		boolean isFinished = this.getVersionBiz().isFinish(ver);//是否完成
		if (!sss.isEmpty()) {
			// 指标头 为了合并同类型的使用
			List<Indicate> indicates = sss.get(0).indicates;
			Map<String, Integer> map = new LinkedHashMap<String, Integer>();
			for (Indicate item : indicates) {
				if(isFinished || item.getState()==0){//选用的指标
					if (map.containsKey(item.getTypeName()+"/"+item.getWeight())) {
						Integer value = map.get(item.getTypeName()+"/"+item.getWeight());
	
						// 如果类型大于2 增加一列放系数
						if (Integer.parseInt(item.getType()) > 2) {
							value = value + 2;
						} else {
							value++;
						}
						map.put(item.getTypeName()+"/"+item.getWeight(), value);
	
					} else {
						// 如果类型大于2 增加一列放系数
						if (Integer.parseInt(item.getType()) > 2) {
							map.put(item.getTypeName()+"/"+item.getWeight(), 2);
						} else {
							map.put(item.getTypeName()+"/"+item.getWeight(), 1);
						}
					}
				}
			}
			request.setAttribute("indicateTitle", map);
			request.setAttribute("title", sss.get(0));
			request.setAttribute("templetes", sss);
		}
		request.setAttribute("emp", emp);
		request.setAttribute("version", version);
		ActionForward af = new ActionForward();
		
		if(isFinished){
			af.setPath("/DMS/Input/score2Finish.jsp");
		}else{
			af.setPath("/DMS/Input/score2.jsp");
		}
		return af;
	}

	/**
	 * 得到选择后的权限
	 * 
	 * @param request
	 * @return
	 */
	private Tempolyee putInfo(HttpServletRequest request) {
		user = (Tuser) request.getSession().getAttribute("logineduser");
		Tempolyee emp = new Tempolyee();
		String group = request.getParameter("group");
		String district = request.getParameter("district");
		emp.selectedGroup = group;
		emp.setDistrict(district);
		emp.setUid(user.getEmp().getUid());
		return emp;

	}
	
	/**
	 * 显示打分结果
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward doShowResult(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		// user = (Tuser) request.getSession().getAttribute("logineduser");
		String version = request.getParameter("version");
		String group = request.getParameter("group");
		String uid = request.getParameter("auid");
		Tempolyee emp = putInfo(request);
		emp.setUid(uid);
		List<Score> sss = getDMSManager().doShowLastVersionResultAll(emp, version,group);// 得到得分

		// doShowLastVersionResult
		request.setAttribute("emp", emp);
		if (sss != null && !sss.isEmpty()) {
			request.setAttribute("title", sss.get(0));
			request.setAttribute("templetes", sss);
			String[] versions = this.getBonusBiz().getAllVersion();
			request.setAttribute("versions", versions);
		}
		ActionForward af = new ActionForward();
		if (group != null && group.equals("0")) {//如果group = 0 表示综合组
			af.setPath("/DMS/Output/showSnapl4.jsp");
		} else if(group != null && group.equals("2")){
			af.setPath("/DMS/Output/showSnape.jsp");
		} else if(group != null && group.equals("3")){
			af.setPath("/DMS/Output/showSnap_XZZ.jsp");
		} else if(group != null && group.equals("4")){
			af.setPath("/DMS/Output/showSnap.jsp");
		}
		return af;
	}

	public ActionForward workerManager(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		String[] uids = request.getParameterValues("uids");
		this.getEmpBiz().dismission(uids);
		doGetMyTeam(mapping, form, request, response);
		ActionForward af = new ActionForward();
		af.setPath("/DMS/emp/MyTeam.jsp");
		return af;
	}

	/**
	 * 更新指标权重
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward doUpdateIndicate(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		Integer[] ids = MyUtil.toTransFormInteger(request
				.getParameterValues("id"));
		Integer[] weights = MyUtil.toTransFormInteger(request
				.getParameterValues("weight"));
		this.getDMSManager().doUpdateWeights(ids, weights);
		doShowIndicate(mapping, form, request, response);
//		ActionForward af = new ActionForward();
//		af.setPath("/DMS/emp/MyTeam.jsp");
		return doShowIndicate(mapping, form, request, response);
	}

	public ActionForward showBonus(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		user = (Tuser) request.getSession().getAttribute("logineduser");
		String version = request.getParameter("version");
		String type = request.getParameter("type");
		List<Bonus> rs = this.getBonusBiz().show(version,
				user.getEmp().getDistrict());
		request.setAttribute("rs", rs);
		ActionForward af = new ActionForward();
		af.setPath("/DMS/BaseInfo/bonus/bouns.jsp");
		if (type != null && type.equals("2")) {
			af.setPath("/DMS/BaseInfo/bonus/settingbouns.jsp");
		}
		return af;
	}

	public ActionForward settingBonus(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		user = (Tuser) request.getSession().getAttribute("logineduser");
		String version = request.getParameter("version");
		this.getBonusBiz().add(version, user.getEmp().getDistrict());
		ActionForward af = new ActionForward();
		af.setPath("/DMS/BaseInfo/bonus/settingbouns.jsp");
		return af;
	}

	public ActionForward updateBonus(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		if(request.getParameter("id")!=null){
			Integer id = Integer.parseInt(request.getParameter("id"));
			Float bonus = Float.parseFloat(request.getParameter("bonus"));
			this.getBonusBiz().update(id, bonus);			
		}
		ActionForward af = new ActionForward();
		af.setPath("/DMS/BaseInfo/bonus/settingbouns.jsp");
		return af;
	}
	
	//----------------Version Module------------------
	public ActionForward finish(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		user = (Tuser) request.getSession().getAttribute("logineduser");
		String version = request.getParameter("version");
		Tempolyee item = user.getEmp();	
		Ver ver = new Ver(version,item.getDistrict(),item.getGroup(),item.getUid());
		this.getVersionBiz().finish(ver);
		ActionForward af = new ActionForward();
//		af.setPath("/DMS/Input/score2Finish.jsp");
		af.setPath("/dMS.do?actionType=doGetUserInfo");
		return af;//doScoreReady(mapping, form, request, response);
	}
	
	public ActionForward undo(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		user = (Tuser) request.getSession().getAttribute("logineduser");
		String version = request.getParameter("version");
		Tempolyee item = user.getEmp();	
		Ver ver = new Ver(version,item.getDistrict(),item.getGroup(),item.getUid());
		this.getVersionBiz().undo(ver);
		ActionForward af = new ActionForward();		
		af.setPath("/dMS.do?actionType=doGetUserInfo");
		return af;
//		doScoreReady(mapping, form, request, response);
		
	}
	
	
}