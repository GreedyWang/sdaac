/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package app.web.struts.action;

import java.io.IOException;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Vector;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import sdaac.wym.app.entity.hr.DepartmentState;
import common.util.DownLoad;
import app.common.CreateEmpIndexExcel;
import app.common.EmpIndexExcel;
import app.common.web.ToJson;
import app.entity.TcompanyIndex;
import app.entity.Tdepartment;
import app.entity.TempIndex;
import app.entity.Tempolyee;
import app.entity.TindexTarget;
import app.entity.Tuser;
import app.web.struts.form.IndexForm;

/** 
 * MyEclipse Struts
 * Creation date: 01-12-2009
 * 
 * XDoclet definition:
 * @struts.action parameter="actionType" validate="true"
 */
public class IndexAction extends BaseAction {
	/*
	 * Generated Methods
	 */

	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward doSelectByType(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		// TODO Auto-generated method stub
		List list=this.getIndexBiz().selectByType();
		System.out.println(list);
		return null;
	}
	
	public ActionForward doSelectAll(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response){
		List<TindexTarget> list=this.getIndexBiz().selectAll();
		request.setAttribute("IndexList", list);
		return mapping.findForward("CompanyShow");
	}
	
	public ActionForward doInsert(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response){
		try {
			request.setCharacterEncoding("utf-8");
		} catch (UnsupportedEncodingException e) {
			// TODO 自动生成 catch 块
			e.printStackTrace();
		}
		IndexForm indexForm=(IndexForm)form;
		this.getIndexBiz().insertIndex(indexForm.getItem());
		List<Tdepartment>list= this.getDepartBiz().getAll();
		for (Tdepartment tdepartment : list) {
			TcompanyIndex item=new TcompanyIndex();			
			item.setTindexTarget(indexForm.getItem());
			item.setTdepartment(tdepartment);
			item.setScore(0.0f);
			item.setPercentage(0.0f);
			this.getDepartIndexBiz().doInsert(item);
		}
		
		return mapping.findForward("CompanyIndexAdd");
	}
	
	/**
	 * 部门指标定义
	 */
	public ActionForward doInserts(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response){

		Integer departId=Integer.parseInt(request.getParameter("departID"));
		IndexForm indexForm=(IndexForm)form;
		List<TindexTarget> items=indexForm.getItems();
		for(TindexTarget indexTarget:items)
		{
			indexTarget.setDepartID(departId);
			this.getIndexBiz().insertIndex(indexTarget);
			if(departId==1)//如果为公司指标
			{
				List<Tdepartment>list= this.getDepartBiz().getAll();
				for (Tdepartment tdepartment : list) {
					TcompanyIndex item=new TcompanyIndex();			
					item.setTindexTarget(indexTarget);
					item.setTdepartment(tdepartment);
					item.setScore(0.0f);
					item.setPercentage(0.0f);
					this.getDepartIndexBiz().doInsert(item);
				}
			}
			else
			{
				Tdepartment tdepartment=new Tdepartment();
				tdepartment.setId(departId);	
				TcompanyIndex item=new TcompanyIndex();		
				item.setTindexTarget(indexTarget);
				item.setTdepartment(tdepartment);
				item.setScore(0.0f);
				item.setPercentage(0.0f);
				this.getDepartIndexBiz().doInsert(item);
			}
		}
		return mapping.findForward("DepartmentIndexAdd");
	}
	
	/**
	 * @return JSON
	 * 查询部门指标库
	 * 部门id，员工id
	 */
	public ActionForward doSelectDepartMentIndexDatabase(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response){
		String version=request.getParameter("version");	
		String empUid=request.getParameter("empUid");	
		List<TempIndex> empIndexs= this.getEmpIndexBiz().doSelectByUid(empUid,version);
		ToJson.listToJsonArrart(empIndexs, response);
		return null;
	}
	
	/**
	 * 员工指标定义
	 * @return 公司指标，部门经理指标
	 * */
	public ActionForward doSelectEmpIndex(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response){
		//flag is false go to score index page
		boolean flag=true;
		if(request.getParameter("flag")!=null){
			flag=false;
		}
		String empUid=request.getParameter("empUid");
		String version=request.getParameter("version");	
		Tempolyee emp=this.getEmpBiz().doSelect(new Tempolyee(empUid));
		Integer departID=emp.getTdepartment().getId();
		request.setAttribute("empUid",empUid);
		request.setAttribute("empName",emp.getName());
		//查看部门已经定义的指标
		List<TcompanyIndex>	DepartEmpIndexs=this.getDepartIndexBiz().doSelectCompanyIndex(departID,version);
		
		//查看员工已经定义的指标
		List<TempIndex> empIndexs= this.getEmpIndexBiz().doSelectByUid(empUid,version);
	
		List<TcompanyIndex> departEmpIndexs=new LinkedList<TcompanyIndex>();
		Map<String, TcompanyIndex> departEmpIndexsMaps=new HashMap<String, TcompanyIndex>();
		//取得公司的指标
		List<TcompanyIndex> companyIndexs=new LinkedList<TcompanyIndex>();//this.getDepartIndexBiz().doSelectCompanyIndex(1);
		//取得不是公司的指标
		if(DepartEmpIndexs!=null)
		{
			for(TcompanyIndex elem:DepartEmpIndexs)
			{
				if(elem.getTindexTarget().getDepartID()==1)
				{
					companyIndexs.add(elem);
				}else{
					departEmpIndexsMaps.put(elem.getTindexTarget().getName().trim(), elem);
				}
				
			}
			for(String key:departEmpIndexsMaps.keySet()){
				departEmpIndexs.add(departEmpIndexsMaps.get(key));
			}
			
		}
		double result1=0f;
		double result2=0f;
		double result=0f;
		
		for(TcompanyIndex elem: companyIndexs)
		{
			
			if(elem.getPercentage()!=null&&elem.getScore()!=null)
			{
				result1+=elem.getPercentage()*elem.getScore();
				version=elem.getTindexTarget().getVersion();
				
			}
		}
		Vector<Integer> ids=new Vector<Integer>();
		for(TempIndex elem: empIndexs)
		{
			if(elem.getPercentage()!=null&&elem.getScore()!=null)
			{
				result2+=elem.getPercentage()*elem.getScore();
			}
			ids.add(elem.getIndex().getId());
		}
		result1=result1/10000;
		result2=result2/10000;
		if(result2==0)
		{
			result=result1;
		}else{
			result=result1*result2;
		}
		if(result > 2) result = 2;
		request.setAttribute("result", new DecimalFormat("#.00000").format(result1)+"*"+new DecimalFormat("#.00000").format(result2)+"="+new DecimalFormat("#.00000").format(result));
		//request.setAttribute("result", result1+"*"+result2+"="+result);
		request.setAttribute("version", version);
		request.setAttribute("DepartEmpIndexs",departEmpIndexs);
		request.setAttribute("companyIndexs", companyIndexs);
		request.setAttribute("empIndexs", empIndexs);//
		request.setAttribute("ids", ids);
		
		Tuser user=(Tuser) request.getSession().getAttribute("logineduser");
		if(user.getEmp().getUid().equals(empUid))//if the target is yourself 
		{
			return mapping.findForward("ManagerIndexAdd");
		}
		else if(flag){
			return mapping.findForward("addEmpIndex");
		}else{
			return mapping.findForward("empIndexScore");
		}
	}
	/**
	 * @see 查看员工指标
	 */
	public ActionForward showEmpIndex(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response){

		
		String empUid=request.getParameter("empUid");
		String version=request.getParameter("version");	
		Tempolyee emp=this.getEmpBiz().doSelect(new Tempolyee(empUid));
		Integer departID=emp.getTdepartment().getId();
		request.setAttribute("empUid",empUid);
		request.setAttribute("empName",emp.getName());
		//查看部门已经定义的指标
		
		List<TcompanyIndex>	DepartEmpIndexs=this.getDepartIndexBiz().doSelectCompanyIndex(departID,version);
		
		//查看员工已经定义的指标
		List<TempIndex> empIndexs= this.getEmpIndexBiz().doSelectByUid(empUid,version);
		
		
		//List<TcompanyIndex> departEmpIndexs=new LinkedList<TcompanyIndex>();
		
		//取得公司的指标
		List<TcompanyIndex> companyIndexs=new LinkedList<TcompanyIndex>();//this.getDepartIndexBiz().doSelectCompanyIndex(1);
		
		if(DepartEmpIndexs!=null)
		{
			for(TcompanyIndex elem:DepartEmpIndexs)
			{
				if(elem.getTindexTarget().getDepartID()==1)
				{
					companyIndexs.add(elem);
				}
			
			}
		}
		Float result1=0f;
		Float result2=0f;
		Float result=0f;
		for(TcompanyIndex elem: companyIndexs)
		{
			if(elem.getPercentage()!=null&&elem.getScore()!=null)
			{
				result1+=elem.getPercentage()*elem.getScore()/10000;
				version=elem.getTindexTarget().getVersion();
			}
		}
		Vector<Integer> ids=new Vector<Integer>();
		for(TempIndex elem: empIndexs)
		{
			if(elem.getPercentage()!=null&&elem.getScore()!=null)
			{
				result2+=elem.getPercentage()*elem.getScore()/10000;
			}
			ids.add(elem.getIndex().getId());
		}
		
		if(result2==0)
		{
			result=result1;
		}else{
			result=result1*result2;
		}
		if(result > 2) result = 2f;
		request.setAttribute("result", new DecimalFormat("#.00000").format(result1)+"*"+new DecimalFormat("#.00000").format(result2)+"="+new DecimalFormat("#.00000").format(result));
		//request.setAttribute("result", result1+"*"+result2+"="+result);
		request.setAttribute("version", version);
	//	request.setAttribute("DepartEmpIndexs",departEmpIndexs);
		request.setAttribute("companyIndexs", companyIndexs);
		request.setAttribute("empIndexs", empIndexs);//
		request.setAttribute("ids", ids);
		
		return mapping.findForward("ManagerIndexAdd");
		
	}
	/**
	 * 更新指标，同时更改score
	 */
	public ActionForward doUpdate(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response){
		IndexForm indexForm=(IndexForm)form;
		String targer=request.getParameter("target");
		Integer id=Integer.parseInt(request.getParameter("id"));
		Float output=0f;
			try {
				output=Float.parseFloat(request.getParameter("output"));
			} catch (NumberFormatException e1) {
				// TODO Auto-generated catch block
				//e1.printStackTrace();
			}
			if(indexForm.getItem().getIsAll()==1){// 部门下全部替换
				//TempIndex aa= getEmpIndexBiz().doSelectByPk(indexForm.getItem().getId());
				int departmentId=getEmpIndexBiz().doSelectByPk(indexForm.getItem().getId()).getTempolyee().getTdepartment().getId();
				this.getIndexBiz().updateIndexAll(indexForm.getItem(),targer,id,output,departmentId);
			}else{
				this.getIndexBiz().updateIndex(indexForm.getItem(),targer,id,output);
			}
		try {
			response.getWriter().write("success update");
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return null;
	}
	/**
	 * @serialData add company index
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward doInsertDepartmentIndex(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
	{		
		IndexForm indexForm=(IndexForm)form;
		this.getIndexBiz().insertIndex(indexForm.getItem());
		return mapping.findForward("DepartmentIndexAdd");
	}
	/**
	 *  查看各部门所定义的指标
	 * @return
	 */
	public ActionForward doSelectEveryDepartment(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
	{		
		//IndexForm indexForm=(IndexForm)form;
		Integer departID=Integer.parseInt(request.getParameter("departID"));
		List<TindexTarget> DepartEmpIndexs=this.getIndexBiz().selectByCondition(null, departID);
		request.setAttribute("DepartEmpIndexs",DepartEmpIndexs);
		return mapping.findForward("everyDepartmentEmpIndexShow");
	}
	/**
	 * 查看每个部门所有员工的指标
	 */
	public ActionForward selectDepEmpsIndexs(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response){
		String DpId=request.getParameter("items.departID");
		Integer departID;
		if(DpId!=null)
		{
			departID=Integer.parseInt(request.getParameter("items.departID"));
		}
		else
		{
			Tuser user=(Tuser) request.getSession().getAttribute("logineduser");
			departID=user.getEmp().getTdepartment().getId();
		}
		Tdepartment depart=this.getDepartBiz().getDepart(departID).get(0);
		String version=request.getParameter("version");
//		down load 2010 data
//		version ="2010-03";
		//得到部门下所有员工
		List<Tempolyee> emps;
		Map<Integer,List<TcompanyIndex>> departIndexs=new HashMap<Integer, List<TcompanyIndex>>();
		if(departID==1)
		{
			emps=this.getDepartBiz().SelectAllPM();
			departIndexs=this.getDepartIndexBiz().selectEveryDepartCompanyIndexs(departID, version);
		}else{
			emps=this.getEmpBiz().doSelectSalaryByDepartID(departID);
		}
		//查看员工已经定义的指标
		Map<Tempolyee, List<TempIndex>> empIndexsMap=new HashMap<Tempolyee, List<TempIndex>>();
		for(Tempolyee elem: emps)
		{
			List<TempIndex> empIndexs= this.getEmpIndexBiz().doSelectByUid(elem.getUid(),version);
			empIndexsMap.put(elem,empIndexs);
			
		}		
		//得到部门指标
		List<TcompanyIndex>	DepartEmpIndexs=this.getDepartIndexBiz().doSelectCompanyIndex(departID,version);		
		//取得公司的指标
		List<TcompanyIndex> companyIndexs=new LinkedList<TcompanyIndex>();
		if(DepartEmpIndexs!=null)
		{
			for(TcompanyIndex elem:DepartEmpIndexs)
			{
				if(elem.getTindexTarget().getDepartID()==1)
				{
					companyIndexs.add(elem);
				}
			}
		}
		
		
		SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd-HH-mm-ss");
		String now=sdf.format(new Date());
		String fileName=request.getRealPath("/")+"excelDown\\EmpIndex_"+depart.getName()+"_"+now+".xls";	
		EmpIndexExcel empIndexEcxel;
		try {
//			empIndexEcxel=new EmpIndexExcel(fileName);
//			empIndexEcxel.write2(empIndexsMap, departIndexs);
			if(departID==1)
			{
				CreateEmpIndexExcel empIndexExcel=new CreateEmpIndexExcel(fileName);
				empIndexExcel.write2(empIndexsMap, departIndexs);
			}else
			{
				//empIndexEcxel.write(empIndexsMap, companyIndexs);
				CreateEmpIndexExcel empIndexExcel=new CreateEmpIndexExcel(fileName);
				empIndexExcel.write(empIndexsMap, companyIndexs);
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		DownLoad dl=new DownLoad();
		dl.dLoad(request, response, fileName);
		//request.setAttribute("empIndexsMap",empIndexsMap);			
		//request.setAttribute("companyIndexs", companyIndexs);
		
		return null;
	}
	
	/**
	 * 查看下属所有员工的指标
	 */
	public ActionForward selectOgIndexs(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response){
	
		Tuser user=(Tuser) request.getSession().getAttribute("logineduser");
		Integer departID=user.getEmp().getTdepartment().getId();
		Tdepartment depart=this.getDepartBiz().getDepart(departID).get(0);
		String version=request.getParameter("version");
		//得到部门下所有员工
		List<Tempolyee> emps;
		Map<Integer,List<TcompanyIndex>> departIndexs=new HashMap<Integer, List<TcompanyIndex>>();
		if(departID==1)
		{
			emps=this.getDepartBiz().SelectAllPM();
			departIndexs=this.getDepartIndexBiz().selectEveryDepartCompanyIndexs(departID, version);
		}else{
			emps=getOgManager().getAllSubordinate(user.getEmp());
			emps.add(user.getEmp());
		}
		//查看员工已经定义的指标
		Map<Tempolyee, List<TempIndex>> empIndexsMap=new HashMap<Tempolyee, List<TempIndex>>();
		for(Tempolyee elem: emps)
		{
			List<TempIndex> empIndexs= this.getEmpIndexBiz().doSelectByUid(elem.getUid(),version);
			empIndexsMap.put(elem,empIndexs);
			
		}		
		//得到部门指标
		List<TcompanyIndex>	DepartEmpIndexs=this.getDepartIndexBiz().doSelectCompanyIndex(departID,version);		
		//取得公司的指标
		List<TcompanyIndex> companyIndexs=new LinkedList<TcompanyIndex>();
		if(DepartEmpIndexs!=null)
		{
			for(TcompanyIndex elem:DepartEmpIndexs)
			{
				if(elem.getTindexTarget().getDepartID()==1)
				{
					companyIndexs.add(elem);
				}
			}
		}
		
		
		SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd-HH-mm-ss");
		String now=sdf.format(new Date());
		String fileName=request.getRealPath("/")+"excelDown\\EmpIndex_"+depart.getName()+"_"+now+".xls";	
		EmpIndexExcel empIndexEcxel;
		try {
			empIndexEcxel=new EmpIndexExcel(fileName);
			if(departID==1)
			{
				empIndexEcxel.write2(empIndexsMap, departIndexs);
			}else
			{
				//empIndexEcxel.write(empIndexsMap, companyIndexs);
				CreateEmpIndexExcel empIndexExcel=new CreateEmpIndexExcel(fileName);
				empIndexExcel.write(empIndexsMap, companyIndexs);
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		DownLoad dl=new DownLoad();
		dl.dLoad(request, response, fileName);
		
		return null;
	}
	
	public ActionForward selectByIndexID(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response){
		Integer indexID=Integer.parseInt(request.getParameter("indexID")); 
		try {
			request.setCharacterEncoding("UTF-8");
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		String targer=request.getParameter("target");
		Integer id=Integer.parseInt(request.getParameter("id"));
		String ot=request.getParameter("output");
		String output="";
		if(ot!=null&&!ot.equals("")) 
		{
			output=ot;//Float.parseFloat(ot);
		}
		TindexTarget index=this.getIndexBiz().doSelectByPK(indexID);
		request.setAttribute("cond", new Object[]{targer,id,output});
		request.setAttribute("index", index);
		return mapping.findForward("indexShow");
	}
	
	/**
	 * 根据部门状态,锁定指标添加
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward selectDepartState(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response){
		Tuser user=(Tuser) request.getSession().getAttribute("logineduser");
		Integer departID=user.getEmp().getTdepartment().getId();
		if(this.getDepartmentIndexStateManager().isPass(departID,DepartmentState.DEFINED)){
			try {
				PrintWriter out=response.getWriter();
				out.append("<h3>The current state is locked </h3>");
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
			return null;
		}else{
			return mapping.findForward("addSelfDempEmpIndexs");
		}
		
	}
	
	/**
	 * 根据部门状态,锁定指标评定
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward selectDepartStateScore(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response){
		Tuser user=(Tuser) request.getSession().getAttribute("logineduser");
		Integer departID=user.getEmp().getTdepartment().getId();
		if(this.getDepartmentIndexStateManager().isPass(departID,DepartmentState.SCORED)){
			try {
				PrintWriter out=response.getWriter();
				out.append("<h3>The current state is locked </h3>");
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
			return null;
		}else{
			return mapping.findForward("scoreSelfDempEmpIndexs");
		}
		
	}
	
	/**
	 * 指标状态清零
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward resetIndexState(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response){
		this.getDepartmentIndexStateManager().doReset();
		return mapping.findForward("KpiState");
	}
	
}