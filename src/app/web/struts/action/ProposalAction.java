/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package app.web.struts.action;

import java.io.IOException;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import common.entity.MyMail;
import common.util.MyUtil;
import app.entity.Tdepartment;
import app.entity.Tempolyee;
import app.entity.TmainSuggestion;
import app.entity.TotherSuggestion;
import app.entity.Tproposal;
import app.entity.Ttheme;
import app.entity.Tuser;
import app.entity.vave.Schedule;
import app.entity.vave.VaveCompanySuggestion;
import app.entity.vave.VaveProposalMore;
import app.entity.vave.VaveProposalState;
import app.entity.vave.VaveProposalStateId;
import app.entity.vave.VaveTeamWork;
import app.entity.vave.VaveTeamWorkProject;
import app.web.struts.form.ProposalForm;

/** 
 * MyEclipse Struts
 * Creation date: 02-19-2009
 * 
 * XDoclet definition:
 * @struts.action parameter="actionType" validate="true"
 */
public class ProposalAction extends BaseAction {
	/*
	 * Generated Methods
	 */
	/**
	 * 查看销售量
	 */
	public ActionForward doSelectVaveInfo(ActionMapping mapping, ActionForm from, 
			HttpServletRequest request,HttpServletResponse response){
		List<String> resultList=this.getVaveInfoBiz().doSelectCustomCode();
		List<String> supplySimpleList=this.getSupplyBiz().doSelectSimpleName();
		request.setAttribute("supplySimpleList",supplySimpleList );
		request.setAttribute("CustomCodeList",resultList);
		return mapping.findForward("VAVE_proposalForm");
	}
	
	/**
	 * 查看公司提案
	 */
	public ActionForward doSearchAllCompany(ActionMapping mapping, ActionForm form, 
			HttpServletRequest request,HttpServletResponse response){
		ProposalForm proposalForm=(ProposalForm)form;
		Tproposal item=proposalForm.getItem();	
		Tuser user=(Tuser)request.getSession().getAttribute("logineduser");
		String uid=user.getEmp().getUid();
		String lastModifyTime=request.getParameter("lastModifyTime");					
		item.setLastModifyTime(MyUtil.formatDate(lastModifyTime));		
		item.setProposalPerson(item.getProposalPerson());
		if(item.getState()==null){item.setState(Tproposal.COMPANY);}
		//--------------
		request.setAttribute("Company_Wide_Suggests", selectbyCond(item,uid));
		return mapping.findForward("doSearchAllCompanyList");
	}
	
	protected List<Tproposal> selectbyCond(Tproposal item,String uid)
	{
		return this.getProposalBiz().doSelectCompany(item,uid);	
	}
	
	/**
	 *	提交提案单 
	 */
	public ActionForward doInsertProposalForm(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		ProposalForm proposalForm=(ProposalForm)form;
		Tproposal item=proposalForm.getItem();
		String[] imValue = request.getParameterValues("imvalue"); 
		item.setImValue(imValue);
		Tuser user=(Tuser)request.getSession().getAttribute("logineduser");
		List<Ttheme>  theme =proposalForm.getThemes();
		 item.setLastModifyTime(new Date());
		 String proposal_ID="VAVE_"+item.getProposalPerson().getUid()+"_"+item.getLastModifyTime();
		 item.setId(proposal_ID);
		 String[] suggestTypes=request.getParameterValues("item.suggestionType");
		 String suggestion = "";
		 if(suggestTypes!=null)
		{
		
			for (int i = 0; i < suggestTypes.length; i++) {
				suggestion+=suggestTypes[i]+",";
			}
		 
		}
		 item.setSuggestionType(suggestion);
		// if(item.getSupply())
		 //提交提案单
		 this.getProposalBiz().doInsert(item);	
		//提交提案单附加
		//String expectSaving=request.getParameter("expectSaving");
	//	if(expectSaving!=null&&!expectSaving.equals(""))
	//	{
			this.doInsertSchedule(request, response, item.getId());
	//	}
		//提交零件------
		 for(Ttheme object :theme)
		 {			 
			 if(object.getPartsName()!=null&&!object.getPartsName().equals(""))
			 {
				 object.setTproposal(item);	 
				 this.getThemeBiz().doInsert(object);	
			 }		 
		 }		 
	
		//保存在个人提案箱
		if(item.getState()==0)
		{
			this.getProposalStateBiz().doSimpleInsert(item.getId(), item.getProposalPerson().getUid());
		}
		
		
		//提交（提案-人）表
		if(item.getState()==1)
		{
			Boolean flag=true;
			Integer departID=this.getEmpBiz().doSelectGetEmpDetails(item.getProposalPerson().getUid()).getTdepartment().getId();
			String[] vaves=this.getDepartBiz().doSelectVaves(departID);
			for(int i=0;i<vaves.length;i++)
			{
				this.getProposalStateBiz().doSimpleInsert(item.getId(), vaves[i]);
				//添加mail列表
				String mailContext ="你有新的提案需要审批,提案编号为:"+item.getId()+",主题:"+item.getTitle();
				MyMail mail=new MyMail(vaves[i],"vave提案审批提示",mailContext,0);				
				this.getMailManager().addMailList(mail);
				if(vaves[i].equals(item.getProposalPerson().getUid()))
				{
					flag=false;
				}
			}
			if(flag)
			{
				if(this.getProposalStateBiz().doSelectByPK(new VaveProposalState(new VaveProposalStateId(item,item.getProposalPerson().getUid())))==null)
				{
					this.getProposalStateBiz().doSimpleInsert(item.getId(), item.getProposalPerson().getUid());
				}
			}	
		}
		return mapping.findForward("selectMyProposalForm") ;
	}
	/**
	 * 当提案被退回提案人时，更改提案
	 * */
	public ActionForward doUpdateProposalForm(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		// TODO Auto-generated method stub
		ProposalForm proposalForm=(ProposalForm)form;
		 Tproposal item=proposalForm.getItem();
		// this.getProposalBiz().doUpdate(item);
		// Tprogram program =proposalForm.getProgram();
		 String[] imValue = request.getParameterValues("imvalue"); 
			item.setImValue(imValue);
		 
		List<Ttheme>  theme 	=proposalForm.getThemes();
		this.doInsertSchedule(request, response, item.getId());
		 for(Ttheme object :theme)
		 {
			if(object.getPartsId()!=null&&!object.getPartsId().equals(""))
			{
				 object.setTproposal(item);	 
				 if(object.getId()==null)
				 {
					 this.getThemeBiz().doInsert(object);
				 }
				 else
				 {
					 this.getThemeBiz().doUpdate(object);
				 }
			}		
		 }		 
//		String[] suggestTypes=request.getParameterValues("item.suggestionType");
//		String suggestion = "";
//		for (int i = 0; i < suggestTypes.length; i++) {
//			suggestion+=suggestTypes[i]+",";
//		}
		item.setLastModifyTime(new Date());		
		 String[] suggestTypes=request.getParameterValues("item.suggestionType");
		 String suggestion = "";
		 if(suggestTypes!=null)
		{
		
			for (int i = 0; i < suggestTypes.length; i++) {
				suggestion+=suggestTypes[i]+",";
			}
		 
		}
		 item.setSuggestionType(suggestion);
		this.getProposalBiz().doUpdateProposal(item);	
		if(item.getState()==1)
		{
			
			//Integer departID=this.getEmpBiz().doSelectGetEmpDetails(item.getProposalPerson().getUid()).getTdepartment().getId();
			Tuser user=(Tuser)request.getSession().getAttribute("logineduser");
			Integer departID=user.getEmp().getTdepartment().getId();
			this.doInsertProposalState(item, departID);
		}
		return mapping.findForward("selectMyProposalForm");
	}	
	/**
	 * 查询部门提案
	 * */
	public ActionForward doSearchOthers(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		ProposalForm proposalForm=(ProposalForm)form;
		String lastModifyTime=request.getParameter("lastModifyTime");				
		Tproposal item=proposalForm.getItem();	
		item.setLastModifyTime(MyUtil.formatDate(lastModifyTime));
		Tuser user=(Tuser)request.getSession().getAttribute("logineduser");
		item.getProposalPerson().setTdepartment(user.getEmp().getTdepartment());
		String uid=user.getUid();
		if(item.getState()==null){item.setState(Tproposal.DEPARTMENT);}
		List<Tproposal> list=this.getProposalBiz().doSelectDepartment(item,uid);
		request.setAttribute("selectVaveOthers", list);	
		Integer departID=user.getEmp().getTdepartment().getId();
		//查看本部门下的所有员工
		List<Tempolyee> empList=this.getEmpBiz().doSelectByDepartID(departID);
		if(null!=empList&&!empList.isEmpty())
		{
			request.setAttribute("empList", empList);
		}	
		return mapping.findForward("Proposal_approval");
	}
	/**
	 * 查询外部们提案
	 */
	public ActionForward doSearchOutside(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		ProposalForm proposalForm=(ProposalForm)form;
		String lastModifyTime=request.getParameter("lastModifyTime");		 
		Tproposal item=proposalForm.getItem();
		//item.setState(2);
		item.setLastModifyTime(MyUtil.formatDate(lastModifyTime));
		Tuser user=(Tuser)request.getSession().getAttribute("logineduser");
		if(item.getState()==null){item.setState(Tproposal.OTHER_DEPARTMENT);}
		List<TmainSuggestion> list=this.getMainSugBiz().doSelectByDepartID(user.getEmp(),item);	
		List <Tproposal> proposals=new ArrayList<Tproposal>();
		for(TmainSuggestion mainSug:list)
		{				
			mainSug.getTproposal().setState_context(mainSug.getTproposal().getState_contexts(mainSug.getTproposal().getState()));
			if(!proposals.contains(mainSug.getTproposal()))
			{				
				proposals.add(mainSug.getTproposal());
			}	
		}	
		request.setAttribute("selectVaveOthers", proposals);
		List<Tdepartment> departList=this.getDepartBiz().getAll();
		if(null!=departList&&!departList.isEmpty())
		{
			request.setAttribute("departList",departList);
		}
		return mapping.findForward("Proposal_approval2");

	}
	/**
	 * 查询我的提案
	 */
	public ActionForward doSearch(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		ProposalForm proposalForm=(ProposalForm)form;
		String lastModifyTime=request.getParameter("lastModifyTime");		 
		Tuser loginedUser=(Tuser)request.getSession().getAttribute("logineduser");
	//	String uid=loginedUser.getUid();
		Tproposal item=proposalForm.getItem();
		
		item.setLastModifyTime(MyUtil.formatDate(lastModifyTime));
		//Tempolyee emp=new Tempolyee();
		//emp.setUid(uid);
		item.setProposalPerson(loginedUser.getEmp());
		List<Tproposal> list=this.getProposalBiz().doSelect(item);
//		for(Tproposal proposal:list)
//		{
//			VaveProposalState proposalState=this.getProposalStateBiz().doSelectByPK(new VaveProposalState(new VaveProposalStateId(proposal,uid)));
//			if(proposalState!=null)
//			{
//				proposal.setIsOpen(proposalState.getIsOpen());
//			}
//		}
		request.setAttribute("selectVaveSelf", list);
		return mapping.findForward("Select_Form");
	}
	/**
	 * 察看本部门提案详情
	 */
	public ActionForward doSelectByProposalIDD(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		Tproposal list=this.doSelectProposalDetailsPost(mapping, form, request, response);
		if(list.getState()==1)
		{
			return mapping.findForward("VAVE_proposalForm_state1");
		}
		else
		{
			return mapping.findForward("ProposalDetails_selfShow");
		}	
	}
	/**
	 * 查询公司提案详细
	 */
	public ActionForward doSelectByProposalIDC(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		Tproposal list=this.doSelectProposalDetailsPost(mapping, form, request, response);
		if(list.getState()==3)
		{
			return mapping.findForward("VAVE_proposalForm_state3");
		}
		else
		{
			return mapping.findForward("ProposalDetails_selfShow");
		}	
	}
	public ActionForward doSelectByProposalIDS(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		Tproposal list=this.doSelectProposalDetailsPost(mapping, form, request, response);
		if(list.getState()==2)
		{
			return mapping.findForward("VAVE_proposalForm_state2");
		}
		else
		{
			return mapping.findForward("ProposalDetails_selfShow");
		}	
	}
	public ActionForward doSelectByProposalID_SelfShow(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		Tproposal list=this.doSelectProposalDetailsPost(mapping, form, request, response);		
		List<String> resultList=this.getVaveInfoBiz().doSelectCustomCode();
		List<String> supplySimpleList=this.getSupplyBiz().doSelectSimpleName();
		request.setAttribute("supplySimpleList",supplySimpleList );
		request.setAttribute("CustomCodeList",resultList);
		
		if(list.getState()==0)
		{
			return mapping.findForward("VAVE_proposalForm_state0");
		}
		else
		{
			return mapping.findForward("ProposalDetails_selfShow");
		}
		
	}
//	
//	public ActionForward doSelectByProposalID_OutShow(ActionMapping mapping, ActionForm form,
//			HttpServletRequest request, HttpServletResponse response) {
//		String proposalID=request.getParameter("proposalID");
//		Tproposal item=new Tproposal();
//		item.setId(proposalID);
//		Tproposal list=this.getProposalBiz().doSelect(item).get(0);
//		list.setSuggestionType(item.choiceSuggestionType(list.getSuggestionType()));
//		List<Ttheme> themeList=this.getThemeBiz().doSelectByProposalID(proposalID);
//		TmainSuggestion mainSug=this.getMainSugBiz().doSelectByProposalID(list.getId());
//		if(mainSug!=null)
//		{
//			request.setAttribute("mainSug",mainSug);
//		}
//		List<TotherSuggestion> otherSugs=this.getOtherSugBiz().doSelectByproposalID(proposalID);	
//		request.setAttribute("PropsalDetailByID", list);//提案表
//		request.setAttribute("themeList", themeList);//主题表
//		request.setAttribute("OtherSuggestion", otherSugs);
//		return mapping.findForward("ProposalDetails_OutShow");
//	}
	/**
	 * 查询我的任务详细
	 */
	public ActionForward doSelectByProposalID_TaskShow(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		Tuser user=(Tuser)request.getSession().getAttribute("logineduser");
		Tempolyee owner=user.getEmp();
		String proposalID=request.getParameter("proposalID");
		Tproposal item=new Tproposal();
		item.setId(proposalID);
		Tproposal list=this.getProposalBiz().doSelect(item).get(0);
		list.setSuggestionType(item.choiceSuggestionType(list.getSuggestionType()));
		//List<Ttheme> themeList=this.getThemeBiz().doSelectByProposalID(proposalID);
		VaveTeamWork teamWork=this.getTeamWorkBiz().doSelectByPorposalID(proposalID);
	    List<VaveTeamWorkProject> teamWorkProjectLsit= this.getTeamWorkProjectBiz().selectMyJobsByTeamWork(teamWork.getWorkTeamId(),owner);
		request.setAttribute("teamWorkList",teamWork);
		request.setAttribute("teamWorkProjectLsit", teamWorkProjectLsit);
		request.setAttribute("PropsalDetailByID", list);//提案表
		//request.setAttribute("themeList", themeList);//主题表
		
		return mapping.findForward("ProposalDetails_taskShow");				
	}
	/**
	 *查询我管理的任务详细 
	 */
	
	public ActionForward doSelecetMyTaskTeam(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
	{
		//this.doSelectProposalDetails(mapping, form, request, response);
		String proposalID=request.getParameter("proposalID");
		Tproposal item=new Tproposal();
		item.setId(proposalID);
		Tproposal list=this.getProposalBiz().doSelect(item).get(0);
		list.setSuggestionType(item.choiceSuggestionType(list.getSuggestionType()));
		VaveTeamWork teamWork=this.getTeamWorkBiz().doSelectByPorposalID(proposalID);
	    List<VaveTeamWorkProject> teamWorkProjectLsit= this.getTeamWorkProjectBiz().doSelectByTeamWorkID(teamWork.getWorkTeamId());
		request.setAttribute("teamWorkList",teamWork);
		request.setAttribute("teamWorkProjectLsit", teamWorkProjectLsit);
		request.setAttribute("PropsalDetailByID", list);//提案表
	//	String proposalID=request.getParameter("proposalID");
		List<Schedule> schedule=this.doSelectSchedule(proposalID);
		VaveProposalMore proposalMore=this.doSelectProposalMore(proposalID);
		request.setAttribute("proposalMore",proposalMore);
		request.setAttribute("VaveSchedule",schedule);
		if(list.getState()==7){//如果项目完成		
			return mapping.findForward("finishedProject");
		}else{
			return mapping.findForward("MyTaskTeam");
		}		
	}
	
	
	/**
	 * 查询提案单详细的公共部分-不带计算附表
	 */
	private void doSelectProposalDetails(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)	
	{
		String proposalID=request.getParameter("proposalID");
		Tproposal item=new Tproposal();
		item.setId(proposalID);
		Tproposal list=this.getProposalBiz().doSelect(item).get(0);
		list.setSuggestionType(item.choiceSuggestionType(list.getSuggestionType()));
		VaveTeamWork teamWork=this.getTeamWorkBiz().doSelectByPorposalID(proposalID);
	    List<VaveTeamWorkProject> teamWorkProjectLsit= this.getTeamWorkProjectBiz().doSelectByTeamWorkID(teamWork.getWorkTeamId());
		request.setAttribute("teamWorkList",teamWork);
		request.setAttribute("teamWorkProjectLsit", teamWorkProjectLsit);
		request.setAttribute("PropsalDetailByID", list);//提案表
	}
	/**
	 * 查询提案单详细的公共部分
	 */	
	private Tproposal doSelectProposalDetailsPost(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)	
	{
		String proposalID=request.getParameter("proposalID");
		Tproposal item=new Tproposal();
		item.setId(proposalID);
	//	item.setState_context(item.getState_contexts(item.getState()));
		Tproposal list=this.getProposalBiz().doSelect(item).get(0);
		list.setSuggestionType(item.choiceSuggestionType(list.getSuggestionType()));
	//	List<Ttheme> themeList=this.getThemeBiz().doSelectByProposalID(proposalID);
		TmainSuggestion mainSug=this.getMainSugBiz().doSelectByProposalID(list.getId());
		if(mainSug!=null)
		{
			request.setAttribute("mainSug",mainSug);
		}
		//查询提案单附加
		List<Schedule> schedule=this.doSelectSchedule(proposalID);
		VaveProposalMore proposalMore=this.doSelectProposalMore(proposalID);
		request.setAttribute("proposalMore", proposalMore);
		request.setAttribute("VaveSchedule",schedule);
	//	request.setAttribute("ProjectList", schedule.getProjectList());
	//	request.setAttribute("StatisticsList", schedule.getStatisticsList());
		List<TotherSuggestion> otherSugs=this.getOtherSugBiz().doSelectByproposalID(proposalID);
		VaveCompanySuggestion companySugs=this.getCompanySugBiz().doSelectByproposalID(proposalID);
		request.setAttribute("companySugs",companySugs );
		request.setAttribute("PropsalDetailByID", list);//提案表
		//request.setAttribute("themeList", themeList);//主题表
		request.setAttribute("OtherSuggestion", otherSugs);
		Tuser loginedUser=(Tuser)request.getSession().getAttribute("logineduser");		
		this.getProposalStateBiz().doUpateOpen(proposalID, loginedUser.getUid());
		return list;
	}
	/**
	 * 更新提案状态
	 * parts and bom       
	 */
	public ActionForward changeState(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response){
		String state=request.getParameter("state");
		String proposalID=request.getParameter("proposalID");
		Tproposal item=new Tproposal(proposalID);
		if(state.equals("WAITCHANGE"))
		{
			item.setState(Tproposal.WAITCHANGE);
		}
		if(state.equals("TERMINA_PROJECT"))
		{
			item.setState(Tproposal.TERMINA_PROJECT);
		}if(state.equals("FINISH_PROJECT"))
		{
			item.setState(Tproposal.FINISH_PROJECT);
		}
		if(state.equals("DO_PROJECT"))
		{
			item.setState(Tproposal.DO_PROJECT);
			//添加一个财务确认任务
//			VaveTeamWorkProject project=new VaveTeamWorkProject();
//			project.setState(VaveTeamWorkProject.JOB_PUBLISH);
//			project.setType("");
//			project.setJobContent(jobContents[i]);
//			project.setResponsiblePerson(new Tempolyee(responsiblePersons[i]));
//			project.setMyTime(myTimes[i]);
//			project.setRemark(remarks[i]);
//			VaveTeamWork teamWork= new VaveTeamWork();
//			teamWork.setWorkTeamId(workTeamID);
//			project.setVaveTeamWork(teamWork);
//			this.getTeamWorkProjectBiz().doInsert(project);
//			//添加mail列表
//			MyMail mail=new MyMail(responsiblePersons[i],"vave新任务",jobContents[i],0);				
//			this.getMailManager().addMailList(mail);
		}
		this.getProposalBiz().doUpdateState(item);
		 String path=mapping.findForward("SelectMyTeamTask").getPath()+"&proposalID="+proposalID;
		 ActionForward af=new ActionForward(path);
		 return af;
	}
	
	/**
	 * 完成项目
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws ParseException 
	 */
	public ActionForward doFinish(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws ParseException{
		String json="{success : false}"; 
		float actualCostSavings=Float.parseFloat(request.getParameter("actSaving"));
		String finishTime = request.getParameter("finishTime");
		String proposalID=request.getParameter("proposalId");
		//System.out.println("request.getParameter(workTeamId)="+request.getParameter("workTeamId"));
		int workTeamId = Integer.parseInt(request.getParameter("workTeamId"));
		VaveTeamWork vtItem= new VaveTeamWork();
		vtItem.setActualCostSavings(actualCostSavings);
		vtItem.setWorkTeamId(workTeamId);
		DateFormat df = new SimpleDateFormat("yyyy-MM-dd");
		vtItem.setActualEndingTime(df.parse(finishTime));
		//变更项目实际完成金额
		this.getTeamWorkBiz().changeTeamWorkActSaving(vtItem);		
		//更改提案为完成状态
		Tproposal item=new Tproposal(proposalID);
		item.setState(Tproposal.FINISH_PROJECT);
		this.getProposalBiz().doUpdateState(item);
		//Return JSON
		json="{success : true}"; 
		try {
			response.getWriter().write(json);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} 
		return null;
	}
	
	/**
	 * 显示所有提案主题
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward showAllTopic(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response){
		ProposalForm proposalForm=(ProposalForm)form;
		Tproposal item=proposalForm.getItem();
		List<Tproposal> list=this.getProposalBiz().doSelect(item);
		request.setAttribute("rs", list);
		return mapping.findForward("AllTopic");
	}
}