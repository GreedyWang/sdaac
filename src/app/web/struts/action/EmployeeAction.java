/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package app.web.struts.action;

import java.io.IOException;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.Vector;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import net.sf.json.JSONArray;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.microsoft.jdbc.base.BaseBatchUpdateException;

import sdaac.wym.app.entity.plm.Bom;

import app.entity.Tdepartment;
import app.entity.TeamWork;
import app.entity.Tempolyee;
import app.entity.TpostType;
import app.entity.Tuser;
import app.web.struts.form.EmpForm;

/**
 * MyEclipse Struts Creation date: 12-19-2008
 * 
 * XDoclet definition:
 * 
 * @struts.action parameter="actionType" validate="true"
 */
public class EmployeeAction extends BaseAction {
	/*
	 * Generated Methods
	 */

	/**
	 * Method execute
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward selectEmp(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		// TODO Auto-generated method stub
		EmpForm empForm = (EmpForm) form;
		List<Tempolyee> result = this.getEmpBiz()
				.selectFuzzy(empForm.getItem());
		if (result != null && !result.isEmpty()) {
			request.setAttribute("empList", result.get(0));
			List<Tdepartment> departs = this.getDepartBiz().getAll2();
			request.setAttribute("departs", departs);
		}
		String flag = request.getParameter("flag");
		if(flag!=null && flag.equals("2")){
			return mapping.findForward("DMSEmpManager");
		}
		ActionForward af = new ActionForward();
		af.setPath("/Manager/EmpManager.jsp");
		return af;
	}

	
	public ActionForward selectDMSEmp(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		// TODO Auto-generated method stub
		EmpForm empForm = (EmpForm) form;
		List<Tempolyee> result = this.getEmpBiz()
				.selectFuzzy(empForm.getItem());
		if (result != null && !result.isEmpty()) {
			request.setAttribute("empList", result.get(0));
			List<Tdepartment> departs = this.getDepartBiz().getAll2();
			request.setAttribute("departs", departs);
		}
		return mapping.findForward("EmpManager");
	}
	
	
	public ActionForward selectEmp2(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		// TODO Auto-generated method stub
		EmpForm empForm = (EmpForm) form;
		List<Tempolyee> result = this.getEmpBiz()
				.selectFuzzy(empForm.getItem());
		request.setAttribute("rs", result);
		return mapping.findForward("ShowEmpUid");
	}

	public ActionForward doUpdate(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		// TODO Auto-generated method stub
		EmpForm empForm = (EmpForm) form;
		Tempolyee item = empForm.getItem();

		List<TpostType> list = this.getPostTypeBiz().doSelect();
		for (TpostType type : list) {
			if (item.getBaseSalary() <= type.getMaxValue()
					&& item.getBaseSalary() >= type.getMinValue()) {
				item.setSalaryType(type.getType());
			}
		}
		this.getEmpBiz().doUpdate(item);
		return mapping.findForward("EmpManager");
	}

	public ActionForward doInsert(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws BaseBatchUpdateException {
		// TODO Auto-generated method stub
		EmpForm empForm = (EmpForm) form;
		Tempolyee item = empForm.getItem();
		if (item.getBaseSalary() != null) {
			List<TpostType> list = this.getPostTypeBiz().doSelect();
			TpostType.calSalaryType(list, item);
		}
		String eprownerarea = "";
		System.out.println(request.getParameter("e1"));
		if(request.getParameter("e1")!=null){
			eprownerarea += request.getParameter("e1")+",";
		}
		if(request.getParameter("e2")!=null){
			eprownerarea += request.getParameter("e2")+",";
		}
		if(request.getParameter("e3")!=null){
			eprownerarea += request.getParameter("e3")+",";
		}
		if(request.getParameter("e4")!=null){
			eprownerarea += request.getParameter("e4")+",";
		}
		item.setEprownerarea(eprownerarea);
		this.getEmpBiz().doInsert(item);		
		return mapping.findForward("EmpManager");
	}

	/**
	 * @see 查询自己所管辖的所有员工
	 * @return json
	 */
	public ActionForward doSelectEmpByDepartId(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		// TODO Auto-generated method stub
		Tuser user = (Tuser) request.getSession().getAttribute("logineduser");
		String uid = user.getEmp().getUid();
		String name = request.getParameter("uname");
		Integer departId = null;
		if (request.getParameter("departId") != null
				&& !request.getParameter("departId").equals("")) {
			departId = Integer.parseInt(request.getParameter("departId"));
		}
		// 得到部门经理的部门
		List<Tdepartment> dprs = this.getDepartBiz().selectByManagerId(uid);
		if (dprs != null && !dprs.isEmpty()) {
			// 得到该部门下属部门
			Integer[] departIDs = dprs.get(0).getSons();

			List<Tempolyee> empLists = new ArrayList<Tempolyee>();
			for (int i = 0; i < departIDs.length; i++) {
				Tempolyee emp = new Tempolyee();
				if (name != null && !name.equals("")) {
					emp.setName(name);
				}
				if (departId != null) {
					if (departId.equals(departIDs[i])) {
						emp.setTdepartment(new Tdepartment(departIDs[i]));
						empLists.addAll(this.getEmpBiz().selectAllSalarys(emp));
					}

				} else {
					emp.setTdepartment(new Tdepartment(departIDs[i]));
					empLists.addAll(this.getEmpBiz().selectAllSalarys(emp));
				}

				// empLists.addAll(this.getEmpBiz().doSelectByDepartID(departIDs[i]));
			}
			JSONArray ja = JSONArray.fromObject(empLists);
			PrintWriter out;
			try {
				response.setCharacterEncoding("utf-8");
				out = response.getWriter();
				out.print(ja.toString());
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		return null;
	}

	/**
	 * @see 查询所有白领
	 */
	public ActionForward doSelectAllSalary(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		String uname = request.getParameter("uname");
		Integer departId = null;
		if (request.getParameter("departId") != null
				&& !request.getParameter("departId").equals("")) {
			departId = Integer.parseInt(request.getParameter("departId"));
		}
		Tempolyee emp = new Tempolyee();
		emp.setName(uname);
		emp.setTdepartment(new Tdepartment(departId));
		List<Tempolyee> empLists = this.getEmpBiz().selectAllSalarys(emp);
		JSONArray ja = JSONArray.fromObject(empLists);
		PrintWriter out;
		try {
			response.setCharacterEncoding("utf-8");
			out = response.getWriter();
			out.print(ja.toString());
		} catch (IOException e) {
			e.printStackTrace();
		}
		return null;
	}

	/**
	 * 添加员工
	 */
	public ActionForward beforeAddEmp(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		List<Tdepartment> departs = this.getDepartBiz().getAll2();
		request.setAttribute("departs", departs);
		return mapping.findForward("EmpAdd");
	}
	
	/**
	 * 添加员工
	 */
	public ActionForward beforeAddDMSEmp(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		List<Tdepartment> departs = this.getDepartBiz().getAll2();
		request.setAttribute("departs", departs);
		return mapping.findForward("DMSEmpAdd");
	}

	/**
	 * 修改员工信息
	 */
	public ActionForward updateEmp(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		EmpForm empForm = (EmpForm) form;
		Tempolyee item = empForm.getItem();
		if (item.getBaseSalary() != null) {
			List<TpostType> list = this.getPostTypeBiz().doSelect();
			TpostType.calSalaryType(list, item);
		}
		this.getEmpBiz().updateEmpBaseInfo(item);
		String path = "/employee.do?actionType=selectEmp&item.uid="
				+ item.getUid();
		ActionForward af = new ActionForward(path);
		return af;
	}

	/**
	 * 创建车间小组
	 */
	public ActionForward createTeamWork(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		String[] menebersUid = request.getParameterValues("uids");
		int teamId = Integer.parseInt(request.getParameter("teamId"));
		this.getEmpBiz().insertWorkerTeam(teamId, menebersUid);
		return mapping.findForward("teamWork");
	}

	/**
	 * show employee organization
	 * @throws UnsupportedEncodingException 
	 * @throws UnsupportedEncodingException 
	 */
	public ActionForward doSelectOrganization(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws UnsupportedEncodingException {
		response.setCharacterEncoding("UTF-8");
	//	request.setCharacterEncoding("UTF-8");
		String uid = request.getParameter("node");
		String name=request.getParameter("name");
		List<Tempolyee> rs=null;
		if (uid == null || uid.equals("-1")) {
			Tuser user = (Tuser) request.getSession().getAttribute(
			"logineduser");
			if(name!=null&&!name.equals("")){
				String para = new String( name.getBytes("iso8859-1"), "utf-8"); 
				rs=getOgManager().selectFuzzy(new Tempolyee(user.getEmp().getUid(),para));
			}else{
				
				rs=getEmpBiz().selectFuzzy(user.getEmp());
			}
			
		} else {
			rs = getOgManager().getSubordinate(uid);
		}
		if (rs != null) {
			StringBuffer sb = new StringBuffer();
			sb.append("[");
			if (rs != null) {
				for (Tempolyee item : rs) {
					// TODO Auto-generated method stub
					sb.append("{id:'" + item.getUid()
							+ "',iconCls:'icon-employee' ,text:'");
					sb.append(item.getName());
					// sb.append(bom.getCpart().getName() + "/");
					sb.append("'},");
				}
				sb.substring(0, sb.length() - 1);
				sb.append("]");
				PrintWriter out;
				try {
					out = response.getWriter();
					// System.out.println(sb.toString());
					out.print(sb.toString());
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
		}

		return null;
	}
}