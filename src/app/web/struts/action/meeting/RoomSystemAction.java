/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package app.web.struts.action.meeting;

import java.io.IOException;
import java.io.PrintWriter;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.Iterator;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import net.sf.json.JsonConfig;

import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.upload.FormFile;

import common.util.JsonDateValueProcessor;

import sdaac.wym.app.Service.Room.*;

import app.common.web.ToJson;
import app.entity.Tdepartment;
import app.entity.Tempolyee;
import app.entity.Tuser;
import app.web.struts.action.BaseAction;

/** 
 * MyEclipse Struts
 * Creation date: 03-01-2011
 * 
 * XDoclet definition:
 * @struts.action parameter="actionType" validate="true"
 */
public class RoomSystemAction extends RoomBaseAction {
	/*
	 * Generated Methods
	 */
	private Tuser user;
	
	/** 
	 * 登记会议室
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 * @throws IOException 
	 */
	public ActionForward doCheckIn(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws IOException {
		// TODO Auto-generated method stub
		RoomSystemForm rsForm = (RoomSystemForm)form;
		FormFile file = rsForm.getFormFile();//取得上传的文件
		user =(Tuser) request.getSession().getAttribute("logineduser");
		Form item = rsForm.getForm();
		item.setEmp(user.getEmp());
		String begin1 = request.getParameter("begintime");
		String begin2 = request.getParameter("beginTime2");
		String end1 = request.getParameter("endTime");
		String end2 = request.getParameter("endTime2");
		Integer state = Integer.parseInt(request.getParameter("state"));
		item.addTime(begin1+" "+begin2, end1+" "+end2);
		item.setState(state);
		RoomManager manager = this.getRsManager();	
		response.setCharacterEncoding("utf-8");
		PrintWriter out;
		out = response.getWriter();
		out.print("{msg :'"+manager.doCheckIn(item,file)+"'}"); 
		return null;
	}
	
	/** 
	 * 查看权限内的会议室
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 * @throws ParseException 
	 * @throws IOException 
	 */
	public ActionForward doShow(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws ParseException {
		// TODO Auto-generated method stub
		RoomSystemForm rsForm = (RoomSystemForm)form;
		user =(Tuser) request.getSession().getAttribute("logineduser");
		Form item = rsForm.getForm();
		String begin = request.getParameter("begin");
		String end = request.getParameter("end");
		String departmentid = request.getParameter("depart");
		String uid = request.getParameter("uid");
		DateFormat df = new SimpleDateFormat("yyyy-MM-dd");
		if(begin != null && !"".equals(begin)) {
			item.setBegintime(df.parse(begin));
		}else{
		
			item.setBegintime(df.parse(df.format(new Date())));
		}
		if(end != null && !"".equals(end)) {
			item.setEndtime(df.parse(end));
		}else {
			Calendar ca = Calendar.getInstance();
			ca.add(Calendar.DAY_OF_WEEK,14);
			item.setEndtime(ca.getTime());
			//System.out.print(ca.getTime());
		}
		if(uid != null && !"".equals(uid)) {
			item.setEmp(new Tempolyee(uid));
		}
		if(departmentid != null && !"".equals(departmentid)) {
			Integer did = Integer.parseInt(departmentid);
			Tempolyee emp =	new Tempolyee();
			emp.setTdepartment(new Tdepartment(did));
			item.setEmp(emp);
		}
		RoomRightsManager rightsManger = this.getRightsManager();
		RoomManager manager = this.getRsManager();	
		rightsManger.checkRight(user.getEmp(), item);
		//toJSON
	    JsonConfig jcf = new JsonConfig();  
	    jcf.registerJsonValueProcessor(Date.class, new JsonDateValueProcessor());  
		     //return jcf; 
	    if(request.getParameter("state")!=null&&!"".equals(request.getParameter("state"))) { 		
			ToJson.listToJsonArrartWithConf(manager.doShowApproved(item), response,jcf);
		}else {
			ToJson.listToJsonArrartWithConf(manager.doShow(item), response,jcf);
		}
		return null;
	}
	
	/** 
	 * 查看单条明细
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 * @throws ParseException 
	 * @throws IOException 
	 */
	public ActionForward doShowDetail(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws ParseException {
		// TODO Auto-generated method stub

		Integer id = Integer.parseInt(request.getParameter("id"));
		String begin = request.getParameter("begin");
		String end = request.getParameter("end");
		RoomManager manager = this.getRsManager();	
		Form item = manager.doShowSingle(new Form(id));
		DateFormat df = new SimpleDateFormat("yyyy-MM-dd hh:mm");
		item.setBegintime(df.parse(begin));
		item.setEndtime(df.parse(end));
		request.setAttribute("rs",item);
		request.setAttribute("flag",request.getParameter("flag"));
		return mapping.findForward("details");
		
	}
	
	/** 
	 * 修改
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 * @throws IOException 
	 */
	public ActionForward doUpdate(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		// TODO Auto-generated method stub
		//RoomSystemForm rsForm = (RoomSystemForm)form;
		Integer id = Integer.parseInt(request.getParameter("id"));
		//user =(Tuser) request.getSession().getAttribute("logineduser");
		//Form item = rsForm.getForm();
		RoomManager manager = this.getRsManager();	
		manager.doShowSingle(new Form(id));
		return mapping.findForward("");
	}
	
	/** 
	 * 删除
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 * @throws ParseException 
	 * @throws IOException 
	 */
	public ActionForward doCancel(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws ParseException {
		// TODO Auto-generated method stub

		Integer id = Integer.parseInt(request.getParameter("id"));
		String flag = request.getParameter("flag");
		RoomManager manager = this.getRsManager();	
		if(flag == null ){
			manager.doCancle(new Form(id));
		}else if (flag !=null ) {
			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");	
			Date b = sdf.parse(request.getParameter("b"));
			Date e = sdf.parse(request.getParameter("e"));	
			FormCancel item = new FormCancel();
			item.setCid(id);
			item.setB(b);
			item.setE(e);
			manager.doCancle(item);
		}	
		request.setAttribute("rs","取消成功!,请刷新查询页面,获得最新信息");
		return mapping.findForward("success");
	}

	
	/** 
	 * 显示日程
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 * @throws IOException 
	 * @throws IOException 
	 */
	public ActionForward doShowSchedule(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws IOException {
		
		response.setContentType("text/xml;charset=UTF-8");
		response.setHeader("Cache-Control","no-cache");   
		   response.setHeader("Cache-Control","no-store");   
		   response.setDateHeader("Expires", 0);   
		   response.setHeader("Pragma","no-cache"); 
		RoomManager manager = this.getRsManager();	
		List<Form> eventList = manager.doShow(new Form());
		StringBuffer strb = new StringBuffer();
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		strb.append("<data>");
		for (Iterator iter = eventList.iterator(); iter.hasNext();) {
			Form event = (Form)iter.next();
			strb.append("<event id=\"" + event.toString() + "\">");
			strb.append("<start_date><![CDATA[" + sdf.format(event.getBegintime()) + "]]></start_date>");
			strb.append("<end_date><![CDATA[" + sdf.format(event.getEndtime()) + "]]></end_date>");
			strb.append("<text><![CDATA[" + event.getEmp().getName()+"("+event.getEmp().getTdepartment().getName()+")"+":"+event.getContext()+",联系方式:"+event.getContact()+",会议室:"+event.getRoomId().getName()+",备注:"+event.getRemark() + "]]></text>");
			strb.append("<details><![CDATA[" + event.getRemark() + "]]></details>");
			strb.append("<section_id><![CDATA[" + event.getRoomId().getId() + "]]></section_id>");
			strb.append("</event>");
		}
		strb.append("</data>");
		response.getWriter().print(strb.toString());
//		System.out.print(strb.toString());
		return null;
	}
	
	/**
	 * 批准重要客户申请单
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws IOException
	 */
	public ActionForward doApprove(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws IOException {
		Integer id = Integer.parseInt(request.getParameter("id"));
		Integer state = Integer.parseInt(request.getParameter("state"));
		RoomManager manager = this.getRsManager();	
		manager.doApprove(state, id);
		request.setAttribute("rs","审批成功!,请刷新查询页面,获得最新信息");
		return mapping.findForward("success");
	}
	
	/**
	 * 查询配件
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws IOException
	 */
	public ActionForward doSelectAccessory(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws IOException {
		Integer id = Integer.parseInt(request.getParameter("id"));
		RoomManager manager = this.getRsManager();	
		request.setAttribute("rs",manager.doSelectById(id));
		return mapping.findForward("accessoryDetails");
	}
	
	/**
	 * 查询配件
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws IOException
	 */
	public ActionForward doUpdateAccessory(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws IOException {
		Integer id = Integer.parseInt(request.getParameter("id"));
		RoomManager manager = this.getRsManager();	
		request.setAttribute("rs",manager.doSelectById(id));
		request.setAttribute("rs","审批成功!,请刷新查询页面,获得最新信息");
		return mapping.findForward("success");
	}
	
	/**
	 * 添加配件
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws IOException
	 */
	public ActionForward doAddAccessory(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws IOException {
		Integer type = Integer.parseInt(request.getParameter("type"));
		String remark = request.getParameter("remark");
		String name = request.getParameter("name");
		
		RoomManager manager = this.getRsManager();	
		Accessory item = new Accessory();
		item.setName(name);
		item.setRemark(remark);
		item.setType(type);
		manager.doAddAccessory(item);
		
		request.setAttribute("rs","审批成功!,请刷新查询页面,获得最新信息");
		return mapping.findForward("success");
	}
	public ActionForward doTest(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws IOException { 
			response.setHeader("Cache-Control","no-cache");   
		   response.setHeader("Cache-Control","no-store");   
		   response.setDateHeader("Expires", 0);   
		   response.setHeader("Pragma","no-cache");  


		return mapping.findForward("doTest");
	}
}